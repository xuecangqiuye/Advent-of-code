import java.util.*;

/**
 * @Author: wangshengbin
 * @Date: 2024/12/12 15:57
 * @Description:
 */
public class Day12 {
    public static void main(String[] args) {
        String input = "OOOBBBBXXXXXXXOOOOOOOAAAAAAAAAOOOOUUUUUUUUUUUUUUUUJJIFFFIIIIRRRRRRRRRRRRRRRRRRRRRNNNVVVVVVVVVVVPPPPPPPPPPPPPDDDDRRDDDDVVVVVVVVVVVGGVVGVVVVVV\n" +
                "OOBBBBBXXXXXXOOOOOOOOOAAAAAAOOOOOOUUUUUUUUUUUUUUUUJJIFIIIIIIIRRRRAAARRRRRRRRRRRRRRVVVVVVVVVVVVVVPNNNNPPGPPPPDDDDDDDDDVVVVVVVVVVVVGGGVGGVVVVV\n" +
                "OBBBBBBXXBXXOOOOOOOOOOAAAAAAOOOOOOUUUUUUUUUUUUUUUUJJIIIIIIIIRRRRAAAARRRRRRRRRRRRRRVVVVVVVVVVVVVFNNNNNPPGGPDDDDDDDDDDPPPVVPVVVVVVGGGGGGVVVVVV\n" +
                "BBBBBBBBBBOOOOOOOOOOOOAAAAAAOOOOOOOOUUUUUUUUUUUUUUUIIIIIIIIRRRAAAAAAARRRRRRRGRRRRRRRVVVVVVVVVVVFNNNNNNPGGGGDBBDDDDDDDPPPPPPVVVGGGGGGGGGVVVVV\n" +
                "ZZBBBBBBBBOOOOOOOOOOOOAAAAAAAOOOOOOOUUUUUUUUUUUUUIIIIIIIIIIIAAAAAAAAAARRARRRRRRBRRRVVVVVVVVVVVVVNNNNNNNNGGGBBBDDDDDDDPPPPPPPVVGGGGGGGGGGGVVV\n" +
                "ZZBBBBBBBOOOOOODOOOOOOAAAAIIIROROOOOUUUUUUUUUUUUUUXIIIIIIIIIAAAAAAAAAAAAAAARRRRRRRRRVVVVVVVVVVVVNNNNNGGGGGGGBBWWWDDDDPPPPPPPGGGGGGGGGGGGGGVV\n" +
                "ZZBBZBBBZOOOOOOOOOOOOOAAAAAIIRROOOOUUUPUUUUUUUUUUUIIIIIIIIIIAAAAAAAAAAADDAARRRRRRRRRRSVVVVVVVVNNNNNNNGGGGGGGGGWWDDDDDPYPPPPPGGGGGGGGGGSGJXXV\n" +
                "ZZZZZZZZZOOOOOOOOOOOOONNNAIIIIIIOOOPUUPPPUUUUUUPUIIIIIIIIIIIAAAAAAAAADADAAAAARRRRRRRRVVVVVVVVVNNNNNNNGGGGGGGWWWWDWDDDPPPPPPPPSSGGGGGGGGGXXXV\n" +
                "ZZZZZZZZZOOZNNOONNNONNNNNAIIIIIIIITPBBPPPPUUUUUPPIIIIIIIIIIAAAAAAAAAADDDAAAAARRRRRRRVVVVVVGVVVNNNNNNNNGGGGGWWWWWWWWDDPPPPPPPPGGGGGGGGGGXXXXX\n" +
                "ZZZZIZZIZZZZNNNNNNNOONNNNNZIIIIIIPPPPPPPPPPPPUPPIIIIIIIIIIIAAAAAAAAAADDDDAAARRRRRRRBVVVVVVGGVGGGNNNNNNGGGGWWWWWWWWWWWPPPPPPPPPPGGGGGGGXXXXXX\n" +
                "IIIIIIIIZZZZNNNNNNNNNNNNNIIIIIIIIIPPPPPPPPPPPJPPPIIIIIIIIIIIAAAAAAATDDDDDAARRRRRRRBBNNNVVVGGGGGGNNNNNNNGGGGWWWWWWWWWWWPPPPPPPPGGGGGGGGXXXXXX\n" +
                "IIIIIIIIIIZZNNNNNNNNNOONNNIIIIIIIIPPPPPPPPPPPPPPPIIIIIIIIIIIIIIICCCCDDDDDAARRRRRRBBBNNNNNVGGGGGGGGNNNRNGGGNNNWWWWWWWWWWWPPPPPPGGGGGGGXXXXXXX\n" +
                "IIIIIIIIIIZZBBBBNNNNOOOOONIIIIIIIIPQPPPPPPPPPPCCPPEIIIIIIIITTIIICCCCCAAAAAARRRRRRRBNNNNNNGGGGGGGGNNNNRNNNNNNNWWWWWWWWWWWPPPPPGGGPPGGXXXXXXXX\n" +
                "IIIIIIIIIZZZBBBBBNNNOOOOOIIIIIIIIIPPPPPPPPPPEPPPEEEIIIIIIIITTCCCCCCCCCACCCCRRRRAARBBANNNNGGGGGGGGRWNNNNNNNNNNWWWWWWWWWWWPPPPPPPPPPGGXXXXXXXX\n" +
                "FIIIIIIIEBBBBBBBBNNNNOOOOOIIIIIIIIIIIPPPPPPRPPPEEEEIIIIIITTUTVCCCCCCCCACCCKKRAAAARBAANAANGGGGGGGRRRRNNNNNNNPWWWWWWWWWWWWWWPPPPPPPXXXXXXXXXXX\n" +
                "FFFFFFIIIIIBBBBBNNNNNOOOOOIOOOIIIIIIIMMPPPPRRPPETTEEIIIITTTTTTCCCCCCCCCCCCKAAAAAAAAAAAAANGGGGRRRRRRRNNNNNNPPPWPWWWWWWWWUPPPPPPPPPXXXXXXXXXXX\n" +
                "FFFFUUIIIIIBBBBBRRROTOOOOOOOOOWQQQIIMMMMPPJRJEEETEEEITTTTTTTTTTCCCCCCCCCCCCPPAAAAAAAAAAARRRGGRRRRRRNNNNNNNNPPPPWWWWWWWWPPPJJPPPPPXXXXXXXXXXX\n" +
                "UUUUUUIIIBBBBBBBRROOOOOOOOOOOOQQQQQIMMMMPPJRJJEETEETTTTTTTTTTTTCCCCCCCCCCCCCAAAAAAAAAAAAAARRRRRRRRRNNNNNNNNPPPWWWWWWWPPPJJJJJPPPPPPPBXXXXXXX\n" +
                "RUUUUUIUUBBBBBBBRROOOOOOOOOOVQQQQQMMMMMMJPJJJJEETTTTTTTTTTTTTTTCCCCCCCCCCCCEEAMAAAAAAAAAAARRQRRRRRRNNNNNNNNPPPWWWWWWPPPPPJJJJPPPPPPBBBXXXXXX\n" +
                "UUUUUUUUUBBBBBBBRRRRORRRROOOQQQQQQMQQMJJJJJJJJEETTTTTTTTTTTTTTCCCCCCCCCCCEEEEAAAAAAAAAAAAARRRRRRRRRNNNNNNNNPPWWWWWPPPPPPJJJJPPPPPPPPPCXXXXXX\n" +
                "UUUUUUUUUBBBBBBRRRRRRRRROOOPQQQQQQQQQJJJJJJJJJEETTTTTTTTTTTTTCCCCCCCCCCCCCEEEEEAAAAAAAAAAAARRRRRRRRRNNNNNNNPPWWWWWPPPPPPPPPJPPPPCCCCCCXXXXXX\n" +
                "UUUUUUUUUUJBBJBRRRRRRRRXMMOPQQQQQQQQKJJJJJJJJJJJTTTTTTTTTTHHHCCCCCCCCCCCCHPEEEAAAAAAAAAAAAAARRRRRRRRNNNNNNNNBWWWWWPPPPPPPPPPPPPCCPCCCVVXXXXX\n" +
                "UUUUUUUUUUJJJJRRRRRRXXXXMMOPQQQQQQQQJJJJJJJJJJJJTTTTTTTTTTTTHCCCCCCCCCCCCCPEEAAAAAAAAAAAAVVVVRRRRRRRRNNNNNNNBWWBWBBPPPPPPPPPPPPEPPCCCCXXXXWC\n" +
                "UUUUUUUUUJJJJJRRRRRRXXXXXMQQQQQQQQQQQJJJJJJJJJJJTTTTTTTTTTTTHCCCCCCCCCCCCCPPEAAEAAASAAAAAVVVVVVVRRRRRNNVVNNNBBBBWBBBBPPPPPPPPPPPPPCCCCCXXWWW\n" +
                "UUUUUUUJJJJJJRRRRRRRRXXXXQQQQQQQQQQQQJJJJJJJJJJTTTTTTTTTTTPTEOOCCCCCCCCCPPPPEEEEAAASVVVVVVVVVVRRRRRRRNVVVIUNNBBBBBBBBBPPPPPPPPPPQPPCCCCWWWWW\n" +
                "UUUUUUUUUJJJJRRRRRRRRXXXXXIIQQQQQQQQQQJJJJJJJJJJJTTTTTTDDTPEEECCECSCCCCCPPPPEEEEAAAVVVVVVVVVVVVVVRRRRIIVIIUBBBBBBBBBPPPPPHPPPHPQQPCCCWWWWWWW\n" +
                "UUUUUUUUUJJJJRRRRRRRRXXXXXXXQQQQOQQQQYYJJJJJFGJJJTTTTTTTDTEEEEEEEECCCCCPPPPPPEEEEAAVVVVVVVVVVVVVRRRIRIIIIMBBBBBBBBBBBPPPPHHPPHHHQQQQWWWWWWWW\n" +
                "UUUUUUUUUUJJJJRRRRRRJJXXXXCXXQQQQYYQYYJJJJJJJGGGGGGTTTTTTEEEEEEEEECCCCPPPPPPPPEEEEEVVVVVVVVVVVVVRRIIIIIIIIIIIBBBBBBBBBBHHHHHHHDHQQWWQQWWWWWW\n" +
                "UUUUUUUJUJJGGGJJJJJJJJXXXXCKXQQQQYYYYJJJJJJJGGGGGGGTEEEEEEEEEEEEEUCCPPPPPPPPPPEEEEEEEVVVVVVVVVVVVRIIIIIIIIIIBBBBBBBBBBOHHHIIHHHJHWWWWWWWWWWW\n" +
                "UUUUUUJJJJJJGGJJJJJJJJJXMXKKKQDQQYYYYYYYYJJJJGGGGGGGEEEEEEEEEEEEEECCAPPPPPPPPPEEEEEEEVVVVVVLVLLLIIIIIIIIIIIIIBBBBBBPBOOHHHHHHHHHHWHWWWWWWWWW\n" +
                "UUKUUUUUUJJJGGJJMMMJMMMMMXXKKKDKKKYYYYYYYYPEJMMGGGEEEEEEEEEEEEEEECCCAAAAPPPPPPEEEEEEEVVVRVVLLLPPIIIIIIIIIIIIIVVVOOBBOOHHHHHHHHHHHHWWWWWWWWWW\n" +
                "KKKDUUUUUUJJGGJMMMPMMMMMMMKKKKKKKKYKYXYMMYPJJGGGGGGEEEEEEEEEEEEEECAAAAAPPPPPPPPEEEEEEEERRRVVLLPPFFIIIIIIIIIVVVVVOOOOOOOOHHHHHHHHHHHHHHWWWWWW\n" +
                "KDDDJJJUJJJJJJJMMMMMMMMMMMKKKKKKKKKKYXMMPYPPPPGGGEEEEEEEEEEEEEEZEAAAAAAAPPPPPPPEEEEEEEERRRSLLPPFFIIQIIIYYYYYVVVJVOOOOOOHHHHHHHHHHHHHHWWWWWWW\n" +
                "KDDDDDJJJJJJJGJMMMMMMMMMMMMKKKKKKKKXXXSMPPPPPPGGGEEEEEEEEEEEEEEZEAAAGGAAPPPAAAPEEEEEERRRRSSLPPPPPIIQIIIYYYYYYVVVVVOOOOOHHHHHHHHHHHHHWWWWWWWW\n" +
                "DDDDDDJJGJGJGGJJMMMMMMMMMMMMKKKKKKKXXSMMPPPPPPPPGGPEEEEEEEEEJEEEEAAAGGAAAAAAAAPEERERRRIRSSSPPPPPPPQQQYYYYYYYYVVVVVVVOOOHOTTTHTTTTTZHWWWWWWWW\n" +
                "DDDDDDDJGGGGGGJJMMMMMMMMMMMMKKKKXXXXXXMMMPPPPPPPPPPPEEEEEEEEJJJEEEAAGAAAAGGAAARRERRRRRRRSSSPPPPPPPPPPLYYYYYYVVVVVVVVDOOOOTTTTTTTTTZWWWWWWWWW\n" +
                "DDDEDDDGGGGGGJJJMMMMMMMMMMMMMKKKKXXXXXMMMPPPPPPPPPPPPEEEEJEEJJJJPEEGGGAGGGGGAAARRRRRRRZZZZPPPPPPPPPPPPYYYYYYVVVYYVVDDDOOOOOTTTTTZZZZWWZZWTTT\n" +
                "EEEEEEDGGGGGGGJJJMMMMMMMMMMOMKKKKKXXXXXLLPPPPPPPPPPPPEEJEJJJJJJJJGGGGGGGGGGGAARRRRRRRRRRPPPPPPPPPPPPPYYYYYYYGYYYDVDDDDDOOOOOTTTTOOOOWWZZZTTT\n" +
                "EEEEEEDGGGGGGGGJJMMMMMMMMMMMMKKKKKKKKAAAAYPPPPPPPPPPPEJJJJJJJJJJJGGGGGGGJGGAARRRRRRRRRRXXXPPPPPPPPPPPYYYYYYYYYYYYYYYYYYYYOOOOOOOOOOOCCZZZTTT\n" +
                "EEEEEEEGGGGGGGGMMMMMMMMMMRMMMKXKKAAAAAAAAPPPPPPAPPPQPPJJJJJJJJJJJGGGGGGGJJGGRRRRRRRRRRRXXPPPPPPPPPPPPYYYYYYYYYYYYYYYYYYYYYYOOOOOOOOCCCCZZZTT\n" +
                "EEMEEEGGGGGGGGGMMMMMMMMMXXXMKKXXKKKAAAAAAAAGPPPAAPPVVVVJJJJJJJJJJJGGGGGGGGGGRRRRRRRRRRRRRRPPPPPPPPPPYYYYYYYYYYYYYYYYYYYYYYYOOOOOOOOOCCCZZZZZ\n" +
                "EEMEEEEGGGGGGGMMMMMMMMMXXXXXXXXXKKKKAIAAAAAAPPAAAPAVVVVJJJJJJJJJJJJGGGGPGGMMMRRRRRRRRRRRRRRPPPPPPPYYYYYYYYYYYYYYYYDDDDOYYYYOOYYOOOZZCZCZZZZZ\n" +
                "EEMMEMGGGGGGGGGEEMMMAALXXXXXXXXXKKKKIIAAAAAAAAAAAPAVVVVJJJJJJJJJJJJGGGGPPPPPRRRRRRRRRRRRRRPPPPPPPPYYYYYYYYYYYYCYYYDDDDOYYYYYYYYOZZZCCZZZZZZZ\n" +
                "EEMMMMMGGGGGGGGEEEEEAAAGGGGGXXXXKIKIIIIIAAAAAAAAAAAVVVVJJJJJJJJJJGGGGGGPPPPPTTTRRRRRRRRRRRPPBBPPPPPYYYYYYYYYYYDDDZDDDDDYYYYYYYYZZZZZZZZZZZZZ\n" +
                "EMMMMMMMMGGKGRGREEEEEAAGGGGGXXXXKIIIIIIIAAAAJAJJAAAVVVVJJJJJJJJJJJJJGGPPPPVVVVTVVRRRRRRRRRRRRBPPPPPYYYLYYYYYYCCDDDDDDDYYYYYYYYYZZZZZZZZZZZZZ\n" +
                "MMMMMMMMMGKKKRRRREEEXAXGGGGGXXXXXXIIIIIIIAAJJJJJAAAAAAAAJJJJJJJJJJJJGPPPPPPVVVTVVRRRRRRRRRRRFBBPPPPQYYQQYYYYYYYBBDDDDYEYYYYYYYYZZZZZZZZZZZZZ\n" +
                "MMMMMMMMMMKKKRRRREEEXXXGGGGGXXXXXXIIIIIIIIIJJJJAAAAAACCJJJLXJJJJQJJJPPPPPPPVVVVVVRRRRRRRRRRRPPPPPPPQQQQQQYYYYYYBDDDDYYYWYYYYYYYYYYZZZZZZZZZZ\n" +
                "MMMMMMMMMKKKKRFRRRRXXXXGGGGGXXXXIIIIIIIIIIIIJJJJJAACCCCCAXXXXXJQQJXEXXPPPRPVVVVVRQQQQRRRRRRRRPPPUPBBQQQQQYYQQPPBBDDDYYYYYYYYYYYYYYZZZZZZZZZZ\n" +
                "MMMMMMMMMKKRRRRRRRRLXXXGGGGGXXXXXIIIIIJJJIJJJJJJJJJCCCCCXXXXQQQQQXXXXXPPPRRRVRRRRQQQRRRRRRRRPPPPPPQQQQQQQQQQPPPBBBBBYYYYYYYYYYYYYYZZZLZZZZZX\n" +
                "MMMMMMMMKKKKRRRRRRLLLXXGGGGGXXIIIIIIIIJJEIJJJJJJJJICCCCCCCXXQXQQQXXXTXPPPRRRRRRRRQQRRRRRRRRRRRRPPPBQQQQQQQQQPPPPPBBBBBYYYYYYYYYYFFZZZZZZXZXX\n" +
                "MMMMMMMMKKKKYRRRRRRRLLLGGGGGXXIIIIIJJJJJJQJJJJJJJFCCCCCCCCXXXXXQQQTTTXXXXWWRRRRRJRRRRRRRRRRRRRBBBBQQQQQQQQPPPPPPPPPPYYYYYYYYYYYYYFFTXXXXXZXX\n" +
                "MMMMMJMMKKKYYRRRRRRRRLLLLLXXXIIIIIIJJJJJJJJGGGGGGFFFCCCCCCXXXXXQQQTTTTXXXXRRRRRRJRRRRRRRRRRRRRBBBBQQQQQQQQQQPPPPPPPPPPYYYYYYYYYFFFFTXXXXXXXX\n" +
                "MMTTTJMMKKKYYOORRRRRLLLLLLXXIIIIIIJJJJJJGJGGGGGMMIFFSSCCCXXXXXXQQTTTTTTTDDJJRJJJJJJJJJRRRRRRRRBBQQQQQQQQQQQQPPPPPPPPPZZYYYYYYYFFTTTTTTTTXXXX\n" +
                "MMTTTMMMKKZZOOOORNLLLLLLLLLZZIZIZZEJJJJGGGGGGMMMMMMMSMMHHXXXXXXQQTTTTTTTTDJJJJJJJJJJJJJRRRRRRBBBQQQQQQQQQQQQPPPPPPPPPPZYYYYYYYYTTTTTTTTTXXXX\n" +
                "MTTTTGMZZZZZOOONNNLLLLLLLLZZZZZIZZZZJJJGGGZZMMMMMMMMMMMHMXXXXXTQTTTTTTTTTDJJJJJJJJJJJJJRRRRRBBBBQQQQQQQQQQQQQPPPPPPPPPYYYYYYYYYTTTTTTTTXXXXX\n" +
                "MMATTTZZZZZZYYYYYNLLLLLLLZZZZZZZZZZPPPZGGZZMMMZMMMMMMMMMMXXXXXTTTTTTTTTKKJJJJJJJJJJJJJRRBBBBBBBBBBEQQQQQQQHQMMPPPPPPUPTTTYTTYYYTTTTTTTTXXXXX\n" +
                "MMTTTKZZZZZZZYYYNNLLLLLLLLZZZZZZZZZZZZZZZZZZZZZMMMMMMMMXXXXXXXXZZTTTTTTTJJJJJJJJJXXJJJRRDDDBBBEEEEEEEMQQQQQQMPPPPPPPTTTTTTTTTTTTTTTTTTTTXXXX\n" +
                "MMMZZZZZZZZZZZZYNLLLLLLLDLLRRZZZZZZZZZZZZZZZZZMMMMMMMMXXXXXXXXXZZTTTTTTTJJJJJJJJXXXJJJXDDDDDDBEEEEEEEMQQMMMMMMPPPPBBUUTTTTTTTTTTTTTTTTTTTXXX\n" +
                "MMMMMZZZZZZZZZZZLLLLLLLDDRRRDZZZZZZZZZZZZZZZZMMDMMMMMMMXXXXXXXXXXSMTTTJJJJJJJJJXXXXXXJXXDDDDDEEEEMEMMMMMMMMMMMPMPBBBBBBBBTTTTTTTTTBBBTTTXXXX\n" +
                "MMMMMZZZZZZZZZZZLLLLLLLDDRDRDZZZZZZZZZMZZZZZMMZMMMMMMMWMXXXXXXXXXMMMMMJJJJJJJJJJXXXXXJXXDDDDDEEEEMMMMMMMMMMMMMMMMMBBBBBBBTTTTTTTBTTBBBTTXXXX\n" +
                "MMMMMZZZZZZZZZZZLLLLLLLDDDDDDDZZZZZZZZZZZZZZZZZMMMMMMMMMMXXXXXXXXMMJJJJJJJJJJJJXXXXXXXXDDDDEEEEEEEEMMMMMMMMMMMMMMMBBBBBTTTTTTTTBBBBBBYTXXXXX\n" +
                "MMMMZZZZZZZZZZZZLLLLNLDDDDDXDZZZZZZZZZIZZZZZZZZMMMMMMMMMMXXXXXXXMMMMBJJJJJJJJJJXXXXXXXXXDDDDDDDEEEMMMMMMMMMMMHMMMMMBBBBBTTTTTTBBBBBBBYBBXXXX\n" +
                "MMMMZZZZZZZZZZZZNNNNNBBDDDDDDZZZZZZZZZZZZZZZZZZMMFFMMMMMXXXXXXXXMMMMBJBBJJJJJJJJXXXXXXXXXXXXDDDDEEMMMMMMMMMMMHMMMMMBBBBNNNNTTTTBBBBBBBBBXXXX\n" +
                "MMOMMOOHZZZZUZZZZNNNBBBDDDDDDZZZZZZZZZGGGGGGZZZMFFFFFMMMXXXXRXOOMMMBBBBBJBBJJPJJXXXXXXXXXXXDDDDDEMMMMMMMMMMMMHHMMNNNBBBNNNXTTTTBBBBBBBBXXXXX\n" +
                "MMOOOOOOOIZZIZZNNNNBBBBBDDDBBBZZZZZBBZGGGGGGZZZFFFFXXMMOOXXXXXXOOBBBBBBBBBBJJJJJEEXXXXXDDDDDDDDDDMMMMMMMMMMBHHHHMNNNNNBNNNXTTTTTBBBBBBBBBBXX\n" +
                "OMOOOOOOOIIIIZZNNNNBBBBBDDBBBBZZZZZBZZGGGGGGZZZZFLFFMMOOOOOXXOOOOBBBBBBBBBBBJJEEEEEEXLLLDLDDZZDDDMMMMMMMMMHHHHHHHNNNNNNNNNXXXXBBBBBBBBBBBBXX\n" +
                "OOOOOOOOOIIIIINNNNNBBBBBBDDDBBBBBBBBBZGGGGGGZZZZFFFFFFOOOOOXOOOOOBBBBBBBBBBBBEEEEELLLLLLLLLDZZZZMMMMMMMMMMMHHHHHHHHNNNNNNNNXXXXBBBBBBBBBBBNN\n" +
                "OOOOOOOOOIIIINNNNBBBBBBBBBBBBBBBBBBBZZGGGGGGZZZFFFFFFFFOOOOOOOOOBBBBBBBBBBBBBBEEEEEELLLLLLDDZZZZMMMMMMMMMMHHHHHHHHHHNNNNNNNXXXXXXBBBBBBBBBNN\n" +
                "OOOOOOOOOOIINNNNNNNBBBBBBBBBBBBBBGGGGGGGGGGGZZZFFFFFFFFOOOOOOOOOBBBBBBBBBBBBBBEEEEEELLLLLLDZZZZZZMMMMMMMMHHHHHHHHHHHHNNNNNNXXXXDDDBBBBBBBBNN\n" +
                "OOOOOOOOIIINNNNNNNBBBBGGGGGBBBBZBGGGGGGGRRZLFFFFFFFFFFFFOOOOOOOOBBBIBBBBBBBDDBEEEEEEELLLLDDZZZZZZMMMMMMMMHXHHHHHHHHHHNNNNNNNXXXXXDGBBBNBBNNN\n" +
                "OOOOOONNIIINNNNNNNNBBBRRRRGGGBBZZGGGGGGGRRZFFFFFFFFFFFFFFFOOOOOOOBBIBBBBBBDDDDDDEEEELLLLLDDZZZZZMMMMMMMMMPPHHHHHHHHQPNNNNNXXXXXXXDGBBBNNNNNN\n" +
                "ZOOOOOONNIINNNKKKKBBBBZRRRRGGGBBZGGGGGGGRRFFFFFFFFFFFFFFFMFOOOOOIIIIIIBBBDDDDDDDDEEELLLLLZZZZZZZZZMMMMMPPPPHHHHHHHPPPPNNXXXXXDDDDDDDDNNNNNNN\n" +
                "OOOOOOOONNIINNNKKKBBOOPPPPPPGBBBBGGGGGGGRRRFFFFFFFFFFFFFFFFOOOIIIIIIIIIIIGDDDDDDDDELLLLLEZZZZZZZZMMMMMMPPPPPPHHHPPPPPPNNPXXXXXDDDDDPDNNNNNNN\n" +
                "AAOOOOOONNNNNNKKKKKKKZPPPPPPGBBZZGGGGGGGGRRFFFFFFFFFFFOFFFFOOOIIIIIIIIIIDDDDDDDDDDDLLLLLLOZZZZZZZMMMMMMMMMPPPPPPPPPPPPPPPXXPXXDDDDDNNNNNNNNN\n" +
                "AAONNNNNNNNNNKKKKKKKKZPPPPPPGZZZZGGGGGGGGRRFFFFFFFFFFFOOFOFOOOOIIIIIIIVVVDDDDDDDDDDLLLLLLOOOOZZZZMMMMMMMMPPPPPPPPPPPPPPPPPPPPXDDDDDDDNNNNNNN\n" +
                "AAAINNNNDNDNNNKKKZZKZZPPPPPPGGGZZGGGGGGGGZRFRFFFFFFFOFOOOOOOOOOIIIIIIIIVVDDDDDDDDDYLLLYLLOOOOZJZZMMMMMMMMMPPPPPPPPPPPPPPPPPIPXDDDDDNNNNNNNNN\n" +
                "IIIIINNDDDDDNNNNNNZZPPPPPPPPGGGGZGGGGGGGGRRRRFFFFFFOOOOOOOOOOOOIIIIIIIIVVVDDDDDDDYYYYYYLLOOOOOOOOMMMMFFFMMPPPPPPPPPPPPPBPPIIIDDDDDNNNNNNNNNN\n" +
                "IIIIIDDDDDDDNNNNNZZZPPPPPPPPGGGGZGGGGGGGGQQQRQFFFFQOOOOOOOOOOOOIIIIIIIVVVVVVDDDDDEYYYYLLOOOOOOOOOMMMMFFFFMFPPPPPPPPPIIPBPPIIIIIDDNNNNNNNNNNN\n" +
                "IIIIIIIDDDDDNNNNNZZZPPPPPPPPGGGGLZZZZZGGGZQQQQFFFQQOQQOOOOOOOOOIIIIIIIVVVVVVVDDDEEEEYOOOOOOOOOOOOMMFFFFFFFFLFPPPPPPPPPPPIIIIDDIDDDNNNNNNNNNN\n" +
                "IIIIIIDDDDDDDDZZZPPPPPPPPPPPPPGZZZZZZZGGGZQQQQQQQQQQQQOOOOOOOOIIIIIIIVVVVVVVVVVDEEMMOOOOOOOOOOOOOOFFFFFFFFFFFFFFVVVPPPPPPPDDDDDDDDGNNNNNNNNN\n" +
                "IIIIIIDDDDDDDDZZZPPPPPPPPPPPPPGPZPPZZPGGGZQQQQQQQQOOOVOOOOOOOOOOIIIIIIIVVVVVVVVDMMMMOOOOOOOOOOOOODFFFFFFFFFFFFFFVVVPPPPPPPDDDDDDDDGGNGNNNNNN\n" +
                "IIIIIIDDDDDDDDZZZPPPPPPPPPPPPPGPPPPPPPGGGPQQQQQQQQQOOOOOOOOOOOOQIIIIIIIVVVVVVVVVEMMMOOOOOOOOOOOOFFFFFFFFFFFFFFFFVVVVPVPPDDDDDDGGDGGGGGGGNNNN\n" +
                "IIIDDIDDDDDDDDZZZPPPPPPPPPPPPPGPPPPPPPGGGQQQQQQQQOQOOOOOOOOOOOOQKIIIIZVVVVVVVVVEEEMMMMOOOOOOOOOFFFFFFFFFFFFFFFVVVVVVVVDDDDDDDDBGGGGGGGGGNNNN\n" +
                "IDDDDDDDDDDDDDDTTPPPPPPPPPPPPPPPPPPPPQQQQQQQQQQQQOOOOOOOOOOQOOQQQQQIICCCCCRVVVEEEEMMMMMMOOOOOOOOOFFFFFFFFFFFFVVVVVVVVVDDDDDDDBBBGGGGHHHGNAAA\n" +
                "DDDDDZDDDDDDDDTTTPPPPPPPPPPPPPPPVPVPPPPPPPQQQQQQQOOOOOOOOQQQOOQQQQQIICCCRRRREEEEEEEMMMMMMOOOOOOOOHFFFFFFFFFFFVVVVVVVVVVVDDDDDBBBGGGGHHHHAAAH\n" +
                "DZDDDZDZDDDDDDDTTPPPPPPPPPPPPPKVVVVVPPPPPPPPQQQQJNOOOMOOOQQQOOQQQQQCCCCCRRREEEEEEEEMMMMMOOOOOOOOHHHFFFFFFFVFVVVVVVVVVVVDDDDDDBBBGGGHHHHHAAAH\n" +
                "ZZZZZZZZDDDDDTTTTTTTZPPPPPPPPPVVVVVVVPPPPPPPJQQQJJJOOONNNQQQQQQQQCCCCCEECRREEEEEEEMMMMMMMMOOOOHHHHHFFFFFFFVVVVVVVVVVVVVDDDDDDBBBGBGHHHHFHHHH\n" +
                "ZZZZZZZZDDDDTTTTTTTZZZZZZKKKKKVVVVVVVVPPPPPPJJQBJJJJJJNQQQQQQQQQQCCCCCCCCCRREEEEEMMMMMMMOOOOKOHFFFFFFFFFFFVVVVVVVVVVVVVDDDDDBBBBBBHHHHHHHHHH\n" +
                "ZZZZZZZZDDDDDDDTOOOZZZZZZKKKKKVVVVVVVVPPPPPPJJJBJJJJJJNQQQQQQQQQQCCCCCCCRCRREEEMMMMMMMMMOMMMMMMMMDFFFFFFFFVVVVVVVVVVVVVDDDDDBBBBBBHHHHHHHHHH\n" +
                "ZZZZZZZZZDDDDDDDOZZZZZZZZKKVKVVVVVVVVVPPPPPPJJJJJJJJJJNQQQQQQQQQQCCCCCRRRRREEXXHMVMMMMMMMMMMMMMMMDFFFFFFFFVVVVVVVVVVDDVDDDDDDDDDDBHHHHHHHHHH\n" +
                "ZZZZZZZZZDDDDDDDOOZZZZZZZZVVVVVVVVVVVSPPPPPJJJJJJJJJJJQQQQQQQQQQQQQCCCRRRRREEXXXVVMMMMMMMMMMMMMMMMFFFZFFFFZVVVVVVVVVDDDDDDDDDDDDHHHHHHHHHHHH\n" +
                "ZZZZZZZZZDZDZDDOOZZZZZZZZZVVVVVVVVVVVSPPPPPJJJJJJJJJJJJJQQQQQQQQQQQNCCRRRRRRXXXXVMMMMMMMMMMMMMMMMMMZZZZZZZZVVVVVNVVDDDDDDDDDDDDHHHHHHHHHHHHH\n" +
                "ZZZZZZZZZZZZZDOOOOZZZZZZVVVVVVVVVVVVVPPPPPPJJJJJJJJJJJJJQQQQQQQQQQQCCCRRRRRXXXVVVMMBUUUUMMMMMMPMMZZZZZZZZZZZVVVVNVFDFFFDDDDDDDDDNHHHHHHHHHHH\n" +
                "ZZZZZZZZZZZZZZZZOOOOOOZZTTVVVVVVVVVVVPPPPPPJJJJJJJJJJJJJQQQQQQQQQQQRCRRRRRRFXVVVVMMUUUUUMMMMPPPPPZZZZZZZZZZZZFFFFVFFFFFFTTTDTTDNNNNHNHHHHHHH\n" +
                "ZZZZZZZZZZZZZZZZOOOOOOZTTTTVVVVVVVVVVJPPPPCJJJJJJJJJJJJJJQQQQQQQQQQRRRRRRFFFVVVVVMMUUUUUMMMMMPPPPZZPZPZZZZZFZFFFFFFFFFFFTTTTTTDNNNNNNHNHHHHH\n" +
                "ZZZZZZZZZZZZZPPZOIIOOOOIITTTTVVVVVVVVJWPPPCCJJJJJJJJJJJJJQQQQQQQQQQRRRFFFFFFFVVVVVVUUUUMMMMPMPPPPPPPPPPZZZZFFFFYFFFFFFFFTTTQTJNNNNNNNNNHNNHH\n" +
                "ZZZZZZZZZZZZZPPPPIIIOOOIIITTVVVVVVVVVWWWCCCCJJJJJJJJJJJJEENEQQQQRRRRRRFFFFFHFFFVVVUUUUUMMPMPPPPPPPPPPPZZZZZFFFFFFFFFFFFFFTTTNNNNNNNNNNNNNNHH\n" +
                "ZZZZZZZZZZZZPPPPPIIIIIIIIITTVVVVVVVVVVWWWCCCCJJJJJJJJJJEOEEEQQRRRRRRRRFFFFFFFFFUUUUUUUUMMPPPPPPPPPPPPPZZZZZZFFFFFFFFFFFTTTTKNNNNNNNNNNNNNHHH\n" +
                "ZZZZZZZZZZZPPPPPPIIIIIIIIIIVVVVVVVVVVVWWWWWWCJJJJJJJJJEEEEEEEQRRRRRRRRFFFFFFFFFFUUUUUUUUMPPPPPPPPPPPDPPZZZZZZFFFFFFFFFFFTTTNNNNNNNNNNNNNFHHH\n" +
                "ZZZZZZZZZZZZPPPPPIIIIIIIIIIMMVVVVVNVWWWWWWWWWJJJJLLLEEEEEEEEEERRRRRRRRFFFFFFFFFCEUUUUUUMMPPPPPPPPPPPPPZZZZZZZFFFFFFFFFFFTTTNTNNNNNNNNNNNNDHH\n" +
                "ZZZZZZZZZZZPPPPPPIPIIIIIIIIMMVPPVIWFWWWWWWWWWWLLLLLLLEEEEEEEEEERERRQQRFFFFFFFFFCEUEEEEUMPPPPPPPPPPPPPPPZZZZZZFFFFFFFFFFKTTTTTTNNNNNNNNNNNNHH\n" +
                "ZZZZZZZZZZZPPPPPPPPIIIIIIIIIMPPPPWWWWWWWWWWWWWLLLLEEEEEEEEEEEEEEEQQQQQFFFFFFFFCCEUCCEEPMPPPPPPPPPPPPPPZZZZZZZFFFFFFFFKKKKTKTTTTTNNNNNNNNVVVH\n" +
                "NNMZZZZZZPPPPPPPPPIIIIIIIIIIIPPPPWQQQQQWWWWWWLLLLLLLEEEEEEEEEEEEBBBQQQQFFFFFFPCCCCCCCCPPPQQQPKPPPPPPPPZZZZZZOFFKKFKKKKKKKKKTTTTTNNNNNNNNNVVV\n" +
                "NNMZZZZZPPPPPPPPPPIRRRIUURPPPPPPPWQQQQQWWWWWWLLLLLLLEEEEEEEEEEEBBQQQQQQUFUUFFFCCCCCCCCPCPQCQPPPPPPPPPPPZZZOOOFFFKKKKKKKKNKKTTTTTNNNNNNNVVVVV\n" +
                "NNMMMMZPPPPPPPPPPIIRRRRRRRPPPPPPPPQQQQQQQQWWWLLLLLLLEEEEEEEEEEEEEEEQQQQUUUUUUFCCCCCCCCCCCCCCCPZZZPPPZZZZZZOOOOOKKKKKKKKKKKKKTTTTTTTTVVVVVVVV\n" +
                "MMMMMMZZPUUPPPPPPPPRRRRRRRRRPPPPPPQQQQQQQQWWWWLLLLLLEEEEEEEEEEEEQQQQQQQQQUUUUCCCCCCCCCCCCCCCCZZZPPZPZZZOOOOOOOOKKKKKKKKKKKIKTTTTTTTTVVVVVVVV\n" +
                "MMMMMMMMUUPPPPPPPPPRRRRRRPPPPPPPPPQQQQQQQQQWQWLLLLLLEEEEEEEIEEEEQQQQQQQQUUUURRRRRRRRRRCCCCCCCZZZZZZZZZOOOOOOOOGKKKKKKKKKKIIKTTTTTTTVVVKKVEVV\n" +
                "MMMMMLMUUPPPPPPPPPRRRRRRPPPPPPPPPPQQQQQQQQQQQQQQQQLLEEEEEEEEEEEEEQQQQQQQUUUURRRRRRRRRRCCCCCCKKKKKKKZZZOOOOOOOKKKKKKKKKKKKRIKTTTTTTTVVVKKKEVV\n" +
                "MMMMMLMUUPPPPPPPPPPPRRRPPPPPPPPPOQQQQQQQQQQQQQQQQQLEEELEMMEEEQQQQQQQQQQIIIUURRRRRRRRRRCCCCHHKKKKKZZZOOOOOOOOOOKKKKKKKKKKKRRKTTTTTVVVEEEKEEEE\n" +
                "MMMMMMMXXPPTPPPPPPPRRRRPPPPPPPPPPQQQQQQQQQQQQQQQQQLEEELLLLLQQQQQQQIQQQIIIIIIRRRRRRRRRRCCHHHHKKKZZZZZZOOOOOOOOOKKKKKKKKKKKRRTTTTTTTVVEEEEEEEE\n" +
                "MMMMMXXXXXPTPPPPPPPPRRRPPPPPPPPPPQQSSSSSSSSQQQQQQLLLELLLLLLLGQQQQQIQIIIIIIIIRRRRRRRRRRCCHHHHKKKKKZAAAQQOOOOOOOKKKKKKKKKKRRRNRRLLRRVEEEEEEEEE\n" +
                "MMMMMMMMXXPXXPPXXPXCRRRPPPPPPPPPSSSSSSSSSSSQQQLLLLLLLLLLLLLQGQQQIIIIIIIIRRRRRRRRRRRRRRCCHHHHQQQKZZAAAAQQOOOOOOOOKKKKKKKRRRRRVRRRRRREEEEEEEEE\n" +
                "MMMMMMMXXXXXXXXXXXXRRRNPPPPPPPPPSSSSSSSSSSSQQQLLLLLLLLLLLLLLGQQIIIIIIIIIRRRRRRRRRRRRRRHHHHHHHHQQZZAAQQQQQOOOOOOOKKKKKKKRRRRRRRRRRRRREEEEEEEE\n" +
                "MMMMMMMMXXXXXXXXXXXXRRRPPPPPPPPPSSSSSSSSSSSQQQQLLLLLLLLLLLLGGGQVIIIIIIIIRRRRRRRRRRRRHCHHHHHHHHQQQQQQQQQQQOOOOOOOKKKKKKKRRRRRRRRRRRREEEEEEEEE\n" +
                "MMMMMMMXXXXXXXXXXXXXEEEEPPPPPPPPSSSSSSSSSSSQQQQLLLLLLLLLLLGGGGQVIILIIIIIRRRRRRRRRRRRHCHHHHHHHHHHHQQQQQQQQQYOOOOOOKKKKKKRRRRRRRRRRRCEEEEEEEEE\n" +
                "MMMMMMMXXXXXXXXXXXXHEEEEPPCCCCPPSSSSSSSSSDDRQQQFFFFLLLLLLLGGGGGHIIIIIIIIRRRRRRRRRRRRHHHHHHHHGGHHHQQQQQQQQYYOOOOOOKKKKKRRRRRRRRRRRRRRREEEEEEE\n" +
                "MMKKKMXXXXXXXXXXXXWHHHHHOPCCCCCCSSSSSSSSSDDDDDFFFFFLLLLLLLLGGGGHIHIIRRRRRRRRRRRRRRRRHHHHHHHGGGHHHQQQCQQQQYYYYOOHHKKKFKRRRRRRRRRRRRRRREEEEEEE\n" +
                "MMKKKMXXXXXXXXXXHHHHHHHOOPCSSSSSSSSSSSSSSDDDDFFFFFFLFLLLLLLLLGGHHHIIRRRRRRRRRRRRRRRRHHHHGGGGGGGGHQQQCCQYYYYYROOHHKKKKHHHRRRRRRRRRRRRYEEEEEEE\n" +
                "MMMKXXXXXXXXXXXXXHHHHHHHHCCSSSSSSSSSSSSSSDDDFFFFFFFFFLLLLLLLLLHHHIIIRRRRRRRRRRRRRRHHHHHGGGGGGGGCQQQCCQQYYYYYRYHHHHHHHHHHRRRRRRRRRRRRRREEEEEE\n" +
                "KKKKKXXXXXXXXXXXHHHHHHHCCCCSSSSSSSSSSSSSSDDDFFFFFFFFFLLLLLLBBBBHHHHIRRRRRRRRRRRRRRHHHHHGGAAGGGGCCCCCCCCYYYYYYYHHHHHHHHHHHRRRRRRRRRRRRRREEEEE\n" +
                "KXXXXXXXXXXXXSHHHHHHHHHHJJCSSSSSSSSSSSSDDDDDFFFTTTFFTLLMLLMMBBBBBBRRRRRRRRRRRRRRRRHHHHHHGGGGGGGCGCCCCCYYYYYYYYYHHHHHHHHHHRRRRRRRRRRRBEEEEEEE\n" +
                "KXXXXXXXXXXXAHHHHHHHSSSSSSSSSSSSSCCDDDSDDDDDDFFTTTTFTTMMLMMPBBBBBBRRRRRRRRRRRRRRRREEPPPGGGGGGGGGGCCCCCYYYYYYYYHHHHHHHTTTHRRRBBBBBBRBBEEEEEEE\n" +
                "KXXXXXXXDXXAAHHHHHHHSSSSSSSSSSSSSCCDDDDDDDDDTTTTTTTTTMMMMMMMTMBBBBRRRRRRRRRRRRRRRREHPPPGGGGGGGGGGGGCCYYYYYYYYYYHHHHHHTTHHHRRBBBBBBRBBEEEEEEE\n" +
                "KKKXXXAXXXAAAHHHHHHHSSSSSSSSSSSSSCCDDDDDDDDDTTTTTTTTTTTMMMMMMMBBBBRRRRRRRRRRRRIEEEEHPPPGGGGGPGGGGGGGGGYYYYYYYYYHHHHTTTTTHBBBBBBBBBBBBEEEEEEE\n" +
                "KKKKKXAAXAAHHHHHHHHHSSSSSSSSSSFCCCDDDDDDDDDTTTTTTTTTTMMMMMMMMMBBBBRRRRRRRRRRLEIEEEEEPPPAGGNNPPPDDGGCCCYYYYYCYYYHHHHHTTTTTBBBBBBBBBBBBBEEEEEE\n" +
                "LLKLKXAAAAAAAAHHHHHHHHHJJJJJJJCCCDDDDDDDDDDTTTTTTTTTTMMMMMMMMMMBMBRRRRRRRRRREEEEEEEEPPPGGNNPPPPPGGGCCCCCCYYCYCHHGGHGTTTTBBBBBBBBBBBBBBBEEEEE\n" +
                "LLLLLAAAAUUUUAAAHYHHHHHJJJJRJJJCDDDDDDDDDTTTTTTTTTTTTMMMMMMMMMMMMBRRRRRRRRRREEEEEEENPPPPPPPPPPKCCCCCCCCCCCCCYCHGGGGGTTTTVVBKBBBBBBBBBEEEEECC\n" +
                "LLLLAAAUUUUUUAUAAHHHHJJJJJJOJGJCDDDDDDLDTTQTTTTTTTTTTMMMMMMMMMMMBBBYYYYHYYYYEEEEPPPPPPPPPPPPPPKCCCCCCCCCCCCCCCCGGGGGGTTTTTTBBFBBBBBBEEEEECCC\n" +
                "LLLLLLUUUUUUUUUUAHHHJJJJJJJOGGGKKDKDDKLDDQQTTTTTTTTMMMMMMMMMMMMMYYYYYYYYYYYYYEEEPPPPPPPPPPPPPPKCCCCCCCCCCCCGGGGGGGGGGGTTTTFFBBBBBBBBEECCCCCC\n" +
                "LLLLLLLUUUUUUUUAAAAAAJJJJJOOOOOOKKKKKKKKKTTTTTTTMMMMMMMMMMMMMMYYYYYYYYYYYYYYEEEEPPPPPPPPPCNNDNNOOCCCCCCCCCCCGGGGGGGGGGTTTFFFFBBBBBBBBECCCCCC\n" +
                "LLLLLLUUUUUUUUUUUDAAJJJJOOOOOOOOOOKKKKKKKKTAMTMMMMMMMMMMMMMMMOYYYYYYYYYYYYYUEEEEPPPPPPPPPPPPPPPPPCCCCCCCCCCCCGGGGGGGGTTTTTTFBBBBBBBBHHCCCCCC\n" +
                "LLLLLUUUUUUUUUUDDDDDPJJJJJOOOOOOOOKKKKKKKKMMMMMMMMMNNNMNMMMMOOOKKKYYYFYYYYYUEEEEPPPPPPPPPPPPPPPPPOCCCCCCCCCCCOGGGGGGGGFFTTFFBBXBXBBHHHOZCCCC\n" +
                "LLLLLLUUUUUUUUUDUDPPPPJJJJOOOOOOOOKKKKKKKMMMMMMMMMMNNNNNNMMHOOKKYYYYYYOOYOOEEEEEPPPPPPPPPPPPPPPPPOCLLCCCCCCCCOOGGGGGGGFFTFFBBBXXXBHHHOOOCCCC\n" +
                "LLLLLLUUUUUUUUUUUPPPPLPPJJJOOOOOOOKKKKKKKMMMMMMMSMMNNNNRNOOOOOOKYOYYOOOOOOOEEEEEEEEEPPPPPPPPPPPPPRLLLLCCCCCCCOGGGGGGGGFFFFFFFBBXXXOOOOCCCOCC\n" +
                "LLLLUUUUUUUUUUUUUUPPPPPPJJOOOOOOOOKKKKKKMMMMMVMMMMMYNNNNNNQOOOOOOOYOOOOOOOOEEEEEEEEEPPPPFFFFFFFRRPLLLPPPPPCCPGGGGGPSSPPPFJJJJBBXOOOOOOOOOOOC\n" +
                "LLLLLLLUUUUUUUUUUUPPPPPPJJJOOOOOTTTKKKKKMMMMMVMNWNNNNNNNNNNOOOOOOOYOOOOOOOOEEEOEEEEOPPPPFKFFFFRRPPLPLPPPPPCPPPPPPPPPPPPPFFJJJJJXXOEOOOOOOCCC\n" +
                "LLLLLLUUUUUUUUUUUPPPPPPPJJOOOOOOTTTKKKCMMMMMMMMNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOEDDPPPPDDDDRRRRRPPPPPPPPPPPPPPPPPPPPPPFFFFJJJJJXOOOOOOOCCCC\n" +
                "LUULUUUUUUUUUUUUUUPPPPPPPPPPOOTTTTTTKKMMMMIMCCCNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOODDPPPPDDDDDRRRRRPPPPPPPPPPPPPPPPPPPPPPFJJJJJJJJJJOOOCCCCCC\n" +
                "DUUUUUUUUUUUUUUAPPPPPPPPPPTTTTTTTTTTKMMMMMMMCCCCNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOODDDDDDDDDRRRRRRRPPPPPPPPPPPPPPPPPPPPPJJJJJJJJJJJOOCCCCCCC\n" +
                "DDDUUUUUUUUUUCCPPPPPPPPPPPPTTTTTTTTTTMMWWWWMCCCCNNNNNNNNNKOOOOOOOOOOOOOOOOOOOOOOOOODDDDDDDDDDRRRRPPPPPPPPPPPPPPPPPPPPPPPAJJJJJJJJCCCCCCCCCCC";

//        String input =
//                        "OOOOO\n" +
//                        "OXOXO\n" +
//                        "OOOOO\n" +
//                        "OXOXO\n" +
//                        "OOOOO";
//        String input = "RRRRIICCFF\n" +
//                "RRRRIICCCF\n" +
//                "VVRRRCCFFF\n" +
//                "VVRCCCJFFF\n" +
//                "VVVVCJJCFE\n" +
//                "VVIVCCJJEE\n" +
//                "VVIIICJJEE\n" +
//                "MIIIIIJJEE\n" +
//                "MIIISIJEEE\n" +
//                "MMMISSJEEE";

//        String input =
//                "AAAAAA\n" +
//                        "AAABBA\n" +
//                        "AAABBA\n" +
//                        "ABBAAA\n" +
//                        "ABBAAA\n" +
//                        "AAAAAA";

        String[] split = input.split("\\n");
        char[][] inputArr = new char[split.length][split[0].length()];
        for (int i = 0; i < split.length; i++) {
            inputArr[i] = split[i].toCharArray();
        }

        int answer1 = solutionForPartOne(inputArr);
        System.out.println(answer1);

        int answer2 = solutionForPartTwo(inputArr);
        System.out.println(answer2);
    }

    public static int solutionForPartOne(char[][] inputArr) {
        int res = 0;
        int h = inputArr.length;
        int w = inputArr[0].length;
        int[][] reginMap = new int[inputArr.length][inputArr[0].length];

        LinkedList<Point> queue = new LinkedList<>();
        queue.offer(new Point(0, 0));

        int reginIndex = 0;
        while (!queue.isEmpty()) {
            Point xy = queue.poll();

            int x = xy.getX();
            int y = xy.getY();
            int perimeter = 0;
            int times = 0;

            if (reginMap[x][y] != 0) {
                continue;
            }
            reginMap[x][y] = ++reginIndex;

            LinkedList<Point> internalPoints = new LinkedList<>();
            internalPoints.offer(xy);

            while (!internalPoints.isEmpty()) {
                times++;
                Point XY = internalPoints.poll();
                int X = XY.getX();
                int Y = XY.getY();
                char C = inputArr[x][y];
                int regin = reginMap[X][Y];

                //right
                if (Y + 1 < w) {
                    char nearC = inputArr[X][Y + 1];
                    boolean b = C == nearC;
                    perimeter += b ? 0 : 1;

                    Point point = new Point(X, Y + 1);
                    if (b) {
                        if (reginMap[X][Y + 1] == 0) {
                            reginMap[X][Y + 1] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                    }
                } else {
                    perimeter++;
                }

                //left
                if (Y - 1 >= 0) {
                    char nearC = inputArr[X][Y - 1];
                    boolean b = C == nearC;
                    perimeter += b ? 0 : 1;

                    Point point = new Point(X, Y - 1);
                    if (b) {
                        if (reginMap[X][Y - 1] == 0) {
                            reginMap[X][Y - 1] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                    }
                } else {
                    perimeter++;
                }

                //up
                if (X - 1 >= 0) {
                    char nearC = inputArr[X - 1][Y];
                    boolean b = C == nearC;
                    perimeter += b ? 0 : 1;

                    Point point = new Point(X - 1, Y);
                    if (b) {
                        if (reginMap[X - 1][Y] == 0) {
                            reginMap[X - 1][Y] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                    }
                } else {
                    perimeter++;
                }
                //down
                if (X + 1 < h) {
                    char nearC = inputArr[X + 1][Y];
                    boolean b = C == nearC;
                    perimeter += b ? 0 : 1;

                    Point point = new Point(X + 1, Y);
                    if (b) {
                        if (reginMap[X + 1][Y] == 0) {
                            reginMap[X + 1][Y] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                    }
                } else {
                    perimeter++;
                }
            }
            res += times * perimeter;
        }
        return res;
    }

    public static int solutionForPartTwo(char[][] inputArr) {
        int res = 0;
        int h = inputArr.length;
        int w = inputArr[0].length;
        int[][] reginMap = new int[inputArr.length][inputArr[0].length];

        LinkedList<Point> queue = new LinkedList<>();
        queue.offer(new Point(0, 0));

        int reginIndex = 0;

        while (!queue.isEmpty()) {
            Point xy = queue.poll();
            int x = xy.getX();
            int y = xy.getY();
            int times = 0;
            int edges = 0;

            if (reginMap[x][y] != 0) {
                continue;
            }
            reginMap[x][y] = ++reginIndex;
            Map<Integer, PriorityQueue<Integer>> upEdges = new HashMap<>();
            Map<Integer, PriorityQueue<Integer>> downEdges = new HashMap<>();
            Map<Integer, PriorityQueue<Integer>> leftEdges = new HashMap<>();
            Map<Integer, PriorityQueue<Integer>> rightEdges = new HashMap<>();


            LinkedList<Point> internalPoints = new LinkedList<>();
            internalPoints.offer(xy);
            while (!internalPoints.isEmpty()) {
                times++;
                Point XY = internalPoints.poll();
                int X = XY.getX();
                int Y = XY.getY();
                char C = inputArr[x][y];
                int regin = reginMap[X][Y];

                //right
                if (Y + 1 < w) {
                    char nearC = inputArr[X][Y + 1];
                    boolean b = C == nearC;
                    Point point = new Point(X, Y + 1);
                    if (b) {
                        if (reginMap[X][Y + 1] == 0) {
                            reginMap[X][Y + 1] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                        if (rightEdges.containsKey(Y)) {
                            rightEdges.get(Y).add(X);
                        } else {
                            rightEdges.put(Y, new PriorityQueue<>(Collections.singletonList(X)));
                        }
                    }
                } else {
                    if (rightEdges.containsKey(Y)) {
                        rightEdges.get(Y).add(X);
                    } else {
                        rightEdges.put(Y, new PriorityQueue<>(Collections.singletonList(X)));
                    }
                }

                //left
                if (Y - 1 >= 0) {
                    char nearC = inputArr[X][Y - 1];
                    boolean b = C == nearC;
                    Point point = new Point(X, Y - 1);
                    if (b) {
                        if (reginMap[X][Y - 1] == 0) {
                            reginMap[X][Y - 1] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                        if (leftEdges.containsKey(Y)) {
                            leftEdges.get(Y).add(X);
                        } else {
                            leftEdges.put(Y, new PriorityQueue<>(Collections.singletonList(X)));
                        }
                    }
                } else {
                    if (leftEdges.containsKey(Y)) {
                        leftEdges.get(Y).add(X);
                    } else {
                        leftEdges.put(Y, new PriorityQueue<>(Collections.singletonList(X)));
                    }
                }
                //up
                if (X - 1 >= 0) {
                    char nearC = inputArr[X - 1][Y];
                    boolean b = C == nearC;
                    Point point = new Point(X - 1, Y);
                    if (b) {
                        if (reginMap[X - 1][Y] == 0) {
                            reginMap[X - 1][Y] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                        if (upEdges.containsKey(X)) {
                            upEdges.get(X).add(Y);
                        } else {
                            upEdges.put(X, new PriorityQueue<>(Collections.singletonList(Y)));
                        }
                    }
                } else {
                    if (upEdges.containsKey(X)) {
                        upEdges.get(X).add(Y);
                    } else {
                        upEdges.put(X, new PriorityQueue<>(Collections.singletonList(Y)));
                    }
                }

                //down
                if (X + 1 < h) {
                    char nearC = inputArr[X + 1][Y];
                    boolean b = C == nearC;
                    Point point = new Point(X + 1, Y);
                    if (b) {
                        if (reginMap[X + 1][Y] == 0) {
                            reginMap[X + 1][Y] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                        if (downEdges.containsKey(X)) {
                            downEdges.get(X).add(Y);
                        } else {
                            downEdges.put(X, new PriorityQueue<>(Collections.singletonList(Y)));
                        }
                    }
                } else {
                    if (downEdges.containsKey(X)) {
                        downEdges.get(X).add(Y);
                    } else {
                        downEdges.put(X, new PriorityQueue<>(Collections.singletonList(Y)));
                    }
                }


            }

            for (Integer key : upEdges.keySet()) {
                PriorityQueue<Integer> q = upEdges.get(key);
                Integer pre = q.poll();
                edges++;
                while (!q.isEmpty()) {
                    Integer poll = q.poll();
                    int diff = poll - pre;
                    pre = poll;
                    if (diff != 1) {
                        edges++;
                    }
                }
            }

            for (Integer key : downEdges.keySet()) {
                PriorityQueue<Integer> q = downEdges.get(key);
                Integer pre = q.poll();
                edges++;
                while (!q.isEmpty()) {
                    Integer poll = q.poll();
                    int diff = poll - pre;
                    pre = poll;
                    if (diff != 1) {
                        edges++;
                    }
                }
            }

            for (Integer key : leftEdges.keySet()) {
                PriorityQueue<Integer> q = leftEdges.get(key);
                Integer pre = q.poll();
                edges++;
                while (!q.isEmpty()) {
                    Integer poll = q.poll();
                    int diff = poll - pre;
                    pre = poll;
                    if (diff != 1) {
                        edges++;
                    }
                }
            }

            for (Integer key : rightEdges.keySet()) {
                PriorityQueue<Integer> q = rightEdges.get(key);
                Integer pre = q.poll();
                edges++;
                while (!q.isEmpty()) {
                    Integer poll = q.poll();
                    int diff = poll - pre;
                    pre = poll;
                    if (diff != 1) {
                        edges++;
                    }
                }
            }
            res += edges * times;
        }
        return res;
    }

    static class Point {
        private int x;
        private int y;

        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int getX() {
            return x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getY() {
            return y;
        }

        public void setY(int y) {
            this.y = y;
        }

        @Override
        public boolean equals(Object o) {
            if (o == null || getClass() != o.getClass()) return false;
            Point point = (Point) o;
            return x == point.x && y == point.y;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }

        @Override
        public String toString() {
            return "Point{" +
                    "x=" + x +
                    ", y=" + y +
                    '}';
        }
    }
}
