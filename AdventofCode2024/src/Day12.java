import com.sun.jmx.remote.internal.ArrayQueue;

import java.util.*;
import java.util.stream.Collectors;

/**
 * @Author: wangshengbin
 * @Date: 2024/12/12 15:57
 * @Description:
 */
public class Day12 {
    public static void main(String[] args) {
//        String input = "OOOBBBBXXXXXXXOOOOOOOAAAAAAAAAOOOOUUUUUUUUUUUUUUUUJJIFFFIIIIRRRRRRRRRRRRRRRRRRRRRNNNVVVVVVVVVVVPPPPPPPPPPPPPDDDDRRDDDDVVVVVVVVVVVGGVVGVVVVVV\n" +
//                "OOBBBBBXXXXXXOOOOOOOOOAAAAAAOOOOOOUUUUUUUUUUUUUUUUJJIFIIIIIIIRRRRAAARRRRRRRRRRRRRRVVVVVVVVVVVVVVPNNNNPPGPPPPDDDDDDDDDVVVVVVVVVVVVGGGVGGVVVVV\n" +
//                "OBBBBBBXXBXXOOOOOOOOOOAAAAAAOOOOOOUUUUUUUUUUUUUUUUJJIIIIIIIIRRRRAAAARRRRRRRRRRRRRRVVVVVVVVVVVVVFNNNNNPPGGPDDDDDDDDDDPPPVVPVVVVVVGGGGGGVVVVVV\n" +
//                "BBBBBBBBBBOOOOOOOOOOOOAAAAAAOOOOOOOOUUUUUUUUUUUUUUUIIIIIIIIRRRAAAAAAARRRRRRRGRRRRRRRVVVVVVVVVVVFNNNNNNPGGGGDBBDDDDDDDPPPPPPVVVGGGGGGGGGVVVVV\n" +
//                "ZZBBBBBBBBOOOOOOOOOOOOAAAAAAAOOOOOOOUUUUUUUUUUUUUIIIIIIIIIIIAAAAAAAAAARRARRRRRRBRRRVVVVVVVVVVVVVNNNNNNNNGGGBBBDDDDDDDPPPPPPPVVGGGGGGGGGGGVVV\n" +
//                "ZZBBBBBBBOOOOOODOOOOOOAAAAIIIROROOOOUUUUUUUUUUUUUUXIIIIIIIIIAAAAAAAAAAAAAAARRRRRRRRRVVVVVVVVVVVVNNNNNGGGGGGGBBWWWDDDDPPPPPPPGGGGGGGGGGGGGGVV\n" +
//                "ZZBBZBBBZOOOOOOOOOOOOOAAAAAIIRROOOOUUUPUUUUUUUUUUUIIIIIIIIIIAAAAAAAAAAADDAARRRRRRRRRRSVVVVVVVVNNNNNNNGGGGGGGGGWWDDDDDPYPPPPPGGGGGGGGGGSGJXXV\n" +
//                "ZZZZZZZZZOOOOOOOOOOOOONNNAIIIIIIOOOPUUPPPUUUUUUPUIIIIIIIIIIIAAAAAAAAADADAAAAARRRRRRRRVVVVVVVVVNNNNNNNGGGGGGGWWWWDWDDDPPPPPPPPSSGGGGGGGGGXXXV\n" +
//                "ZZZZZZZZZOOZNNOONNNONNNNNAIIIIIIIITPBBPPPPUUUUUPPIIIIIIIIIIAAAAAAAAAADDDAAAAARRRRRRRVVVVVVGVVVNNNNNNNNGGGGGWWWWWWWWDDPPPPPPPPGGGGGGGGGGXXXXX\n" +
//                "ZZZZIZZIZZZZNNNNNNNOONNNNNZIIIIIIPPPPPPPPPPPPUPPIIIIIIIIIIIAAAAAAAAAADDDDAAARRRRRRRBVVVVVVGGVGGGNNNNNNGGGGWWWWWWWWWWWPPPPPPPPPPGGGGGGGXXXXXX\n" +
//                "IIIIIIIIZZZZNNNNNNNNNNNNNIIIIIIIIIPPPPPPPPPPPJPPPIIIIIIIIIIIAAAAAAATDDDDDAARRRRRRRBBNNNVVVGGGGGGNNNNNNNGGGGWWWWWWWWWWWPPPPPPPPGGGGGGGGXXXXXX\n" +
//                "IIIIIIIIIIZZNNNNNNNNNOONNNIIIIIIIIPPPPPPPPPPPPPPPIIIIIIIIIIIIIIICCCCDDDDDAARRRRRRBBBNNNNNVGGGGGGGGNNNRNGGGNNNWWWWWWWWWWWPPPPPPGGGGGGGXXXXXXX\n" +
//                "IIIIIIIIIIZZBBBBNNNNOOOOONIIIIIIIIPQPPPPPPPPPPCCPPEIIIIIIIITTIIICCCCCAAAAAARRRRRRRBNNNNNNGGGGGGGGNNNNRNNNNNNNWWWWWWWWWWWPPPPPGGGPPGGXXXXXXXX\n" +
//                "IIIIIIIIIZZZBBBBBNNNOOOOOIIIIIIIIIPPPPPPPPPPEPPPEEEIIIIIIIITTCCCCCCCCCACCCCRRRRAARBBANNNNGGGGGGGGRWNNNNNNNNNNWWWWWWWWWWWPPPPPPPPPPGGXXXXXXXX\n" +
//                "FIIIIIIIEBBBBBBBBNNNNOOOOOIIIIIIIIIIIPPPPPPRPPPEEEEIIIIIITTUTVCCCCCCCCACCCKKRAAAARBAANAANGGGGGGGRRRRNNNNNNNPWWWWWWWWWWWWWWPPPPPPPXXXXXXXXXXX\n" +
//                "FFFFFFIIIIIBBBBBNNNNNOOOOOIOOOIIIIIIIMMPPPPRRPPETTEEIIIITTTTTTCCCCCCCCCCCCKAAAAAAAAAAAAANGGGGRRRRRRRNNNNNNPPPWPWWWWWWWWUPPPPPPPPPXXXXXXXXXXX\n" +
//                "FFFFUUIIIIIBBBBBRRROTOOOOOOOOOWQQQIIMMMMPPJRJEEETEEEITTTTTTTTTTCCCCCCCCCCCCPPAAAAAAAAAAARRRGGRRRRRRNNNNNNNNPPPPWWWWWWWWPPPJJPPPPPXXXXXXXXXXX\n" +
//                "UUUUUUIIIBBBBBBBRROOOOOOOOOOOOQQQQQIMMMMPPJRJJEETEETTTTTTTTTTTTCCCCCCCCCCCCCAAAAAAAAAAAAAARRRRRRRRRNNNNNNNNPPPWWWWWWWPPPJJJJJPPPPPPPBXXXXXXX\n" +
//                "RUUUUUIUUBBBBBBBRROOOOOOOOOOVQQQQQMMMMMMJPJJJJEETTTTTTTTTTTTTTTCCCCCCCCCCCCEEAMAAAAAAAAAAARRQRRRRRRNNNNNNNNPPPWWWWWWPPPPPJJJJPPPPPPBBBXXXXXX\n" +
//                "UUUUUUUUUBBBBBBBRRRRORRRROOOQQQQQQMQQMJJJJJJJJEETTTTTTTTTTTTTTCCCCCCCCCCCEEEEAAAAAAAAAAAAARRRRRRRRRNNNNNNNNPPWWWWWPPPPPPJJJJPPPPPPPPPCXXXXXX\n" +
//                "UUUUUUUUUBBBBBBRRRRRRRRROOOPQQQQQQQQQJJJJJJJJJEETTTTTTTTTTTTTCCCCCCCCCCCCCEEEEEAAAAAAAAAAAARRRRRRRRRNNNNNNNPPWWWWWPPPPPPPPPJPPPPCCCCCCXXXXXX\n" +
//                "UUUUUUUUUUJBBJBRRRRRRRRXMMOPQQQQQQQQKJJJJJJJJJJJTTTTTTTTTTHHHCCCCCCCCCCCCHPEEEAAAAAAAAAAAAAARRRRRRRRNNNNNNNNBWWWWWPPPPPPPPPPPPPCCPCCCVVXXXXX\n" +
//                "UUUUUUUUUUJJJJRRRRRRXXXXMMOPQQQQQQQQJJJJJJJJJJJJTTTTTTTTTTTTHCCCCCCCCCCCCCPEEAAAAAAAAAAAAVVVVRRRRRRRRNNNNNNNBWWBWBBPPPPPPPPPPPPEPPCCCCXXXXWC\n" +
//                "UUUUUUUUUJJJJJRRRRRRXXXXXMQQQQQQQQQQQJJJJJJJJJJJTTTTTTTTTTTTHCCCCCCCCCCCCCPPEAAEAAASAAAAAVVVVVVVRRRRRNNVVNNNBBBBWBBBBPPPPPPPPPPPPPCCCCCXXWWW\n" +
//                "UUUUUUUJJJJJJRRRRRRRRXXXXQQQQQQQQQQQQJJJJJJJJJJTTTTTTTTTTTPTEOOCCCCCCCCCPPPPEEEEAAASVVVVVVVVVVRRRRRRRNVVVIUNNBBBBBBBBBPPPPPPPPPPQPPCCCCWWWWW\n" +
//                "UUUUUUUUUJJJJRRRRRRRRXXXXXIIQQQQQQQQQQJJJJJJJJJJJTTTTTTDDTPEEECCECSCCCCCPPPPEEEEAAAVVVVVVVVVVVVVVRRRRIIVIIUBBBBBBBBBPPPPPHPPPHPQQPCCCWWWWWWW\n" +
//                "UUUUUUUUUJJJJRRRRRRRRXXXXXXXQQQQOQQQQYYJJJJJFGJJJTTTTTTTDTEEEEEEEECCCCCPPPPPPEEEEAAVVVVVVVVVVVVVRRRIRIIIIMBBBBBBBBBBBPPPPHHPPHHHQQQQWWWWWWWW\n" +
//                "UUUUUUUUUUJJJJRRRRRRJJXXXXCXXQQQQYYQYYJJJJJJJGGGGGGTTTTTTEEEEEEEEECCCCPPPPPPPPEEEEEVVVVVVVVVVVVVRRIIIIIIIIIIIBBBBBBBBBBHHHHHHHDHQQWWQQWWWWWW\n" +
//                "UUUUUUUJUJJGGGJJJJJJJJXXXXCKXQQQQYYYYJJJJJJJGGGGGGGTEEEEEEEEEEEEEUCCPPPPPPPPPPEEEEEEEVVVVVVVVVVVVRIIIIIIIIIIBBBBBBBBBBOHHHIIHHHJHWWWWWWWWWWW\n" +
//                "UUUUUUJJJJJJGGJJJJJJJJJXMXKKKQDQQYYYYYYYYJJJJGGGGGGGEEEEEEEEEEEEEECCAPPPPPPPPPEEEEEEEVVVVVVLVLLLIIIIIIIIIIIIIBBBBBBPBOOHHHHHHHHHHWHWWWWWWWWW\n" +
//                "UUKUUUUUUJJJGGJJMMMJMMMMMXXKKKDKKKYYYYYYYYPEJMMGGGEEEEEEEEEEEEEEECCCAAAAPPPPPPEEEEEEEVVVRVVLLLPPIIIIIIIIIIIIIVVVOOBBOOHHHHHHHHHHHHWWWWWWWWWW\n" +
//                "KKKDUUUUUUJJGGJMMMPMMMMMMMKKKKKKKKYKYXYMMYPJJGGGGGGEEEEEEEEEEEEEECAAAAAPPPPPPPPEEEEEEEERRRVVLLPPFFIIIIIIIIIVVVVVOOOOOOOOHHHHHHHHHHHHHHWWWWWW\n" +
//                "KDDDJJJUJJJJJJJMMMMMMMMMMMKKKKKKKKKKYXMMPYPPPPGGGEEEEEEEEEEEEEEZEAAAAAAAPPPPPPPEEEEEEEERRRSLLPPFFIIQIIIYYYYYVVVJVOOOOOOHHHHHHHHHHHHHHWWWWWWW\n" +
//                "KDDDDDJJJJJJJGJMMMMMMMMMMMMKKKKKKKKXXXSMPPPPPPGGGEEEEEEEEEEEEEEZEAAAGGAAPPPAAAPEEEEEERRRRSSLPPPPPIIQIIIYYYYYYVVVVVOOOOOHHHHHHHHHHHHHWWWWWWWW\n" +
//                "DDDDDDJJGJGJGGJJMMMMMMMMMMMMKKKKKKKXXSMMPPPPPPPPGGPEEEEEEEEEJEEEEAAAGGAAAAAAAAPEERERRRIRSSSPPPPPPPQQQYYYYYYYYVVVVVVVOOOHOTTTHTTTTTZHWWWWWWWW\n" +
//                "DDDDDDDJGGGGGGJJMMMMMMMMMMMMKKKKXXXXXXMMMPPPPPPPPPPPEEEEEEEEJJJEEEAAGAAAAGGAAARRERRRRRRRSSSPPPPPPPPPPLYYYYYYVVVVVVVVDOOOOTTTTTTTTTZWWWWWWWWW\n" +
//                "DDDEDDDGGGGGGJJJMMMMMMMMMMMMMKKKKXXXXXMMMPPPPPPPPPPPPEEEEJEEJJJJPEEGGGAGGGGGAAARRRRRRRZZZZPPPPPPPPPPPPYYYYYYVVVYYVVDDDOOOOOTTTTTZZZZWWZZWTTT\n" +
//                "EEEEEEDGGGGGGGJJJMMMMMMMMMMOMKKKKKXXXXXLLPPPPPPPPPPPPEEJEJJJJJJJJGGGGGGGGGGGAARRRRRRRRRRPPPPPPPPPPPPPYYYYYYYGYYYDVDDDDDOOOOOTTTTOOOOWWZZZTTT\n" +
//                "EEEEEEDGGGGGGGGJJMMMMMMMMMMMMKKKKKKKKAAAAYPPPPPPPPPPPEJJJJJJJJJJJGGGGGGGJGGAARRRRRRRRRRXXXPPPPPPPPPPPYYYYYYYYYYYYYYYYYYYYOOOOOOOOOOOCCZZZTTT\n" +
//                "EEEEEEEGGGGGGGGMMMMMMMMMMRMMMKXKKAAAAAAAAPPPPPPAPPPQPPJJJJJJJJJJJGGGGGGGJJGGRRRRRRRRRRRXXPPPPPPPPPPPPYYYYYYYYYYYYYYYYYYYYYYOOOOOOOOCCCCZZZTT\n" +
//                "EEMEEEGGGGGGGGGMMMMMMMMMXXXMKKXXKKKAAAAAAAAGPPPAAPPVVVVJJJJJJJJJJJGGGGGGGGGGRRRRRRRRRRRRRRPPPPPPPPPPYYYYYYYYYYYYYYYYYYYYYYYOOOOOOOOOCCCZZZZZ\n" +
//                "EEMEEEEGGGGGGGMMMMMMMMMXXXXXXXXXKKKKAIAAAAAAPPAAAPAVVVVJJJJJJJJJJJJGGGGPGGMMMRRRRRRRRRRRRRRPPPPPPPYYYYYYYYYYYYYYYYDDDDOYYYYOOYYOOOZZCZCZZZZZ\n" +
//                "EEMMEMGGGGGGGGGEEMMMAALXXXXXXXXXKKKKIIAAAAAAAAAAAPAVVVVJJJJJJJJJJJJGGGGPPPPPRRRRRRRRRRRRRRPPPPPPPPYYYYYYYYYYYYCYYYDDDDOYYYYYYYYOZZZCCZZZZZZZ\n" +
//                "EEMMMMMGGGGGGGGEEEEEAAAGGGGGXXXXKIKIIIIIAAAAAAAAAAAVVVVJJJJJJJJJJGGGGGGPPPPPTTTRRRRRRRRRRRPPBBPPPPPYYYYYYYYYYYDDDZDDDDDYYYYYYYYZZZZZZZZZZZZZ\n" +
//                "EMMMMMMMMGGKGRGREEEEEAAGGGGGXXXXKIIIIIIIAAAAJAJJAAAVVVVJJJJJJJJJJJJJGGPPPPVVVVTVVRRRRRRRRRRRRBPPPPPYYYLYYYYYYCCDDDDDDDYYYYYYYYYZZZZZZZZZZZZZ\n" +
//                "MMMMMMMMMGKKKRRRREEEXAXGGGGGXXXXXXIIIIIIIAAJJJJJAAAAAAAAJJJJJJJJJJJJGPPPPPPVVVTVVRRRRRRRRRRRFBBPPPPQYYQQYYYYYYYBBDDDDYEYYYYYYYYZZZZZZZZZZZZZ\n" +
//                "MMMMMMMMMMKKKRRRREEEXXXGGGGGXXXXXXIIIIIIIIIJJJJAAAAAACCJJJLXJJJJQJJJPPPPPPPVVVVVVRRRRRRRRRRRPPPPPPPQQQQQQYYYYYYBDDDDYYYWYYYYYYYYYYZZZZZZZZZZ\n" +
//                "MMMMMMMMMKKKKRFRRRRXXXXGGGGGXXXXIIIIIIIIIIIIJJJJJAACCCCCAXXXXXJQQJXEXXPPPRPVVVVVRQQQQRRRRRRRRPPPUPBBQQQQQYYQQPPBBDDDYYYYYYYYYYYYYYZZZZZZZZZZ\n" +
//                "MMMMMMMMMKKRRRRRRRRLXXXGGGGGXXXXXIIIIIJJJIJJJJJJJJJCCCCCXXXXQQQQQXXXXXPPPRRRVRRRRQQQRRRRRRRRPPPPPPQQQQQQQQQQPPPBBBBBYYYYYYYYYYYYYYZZZLZZZZZX\n" +
//                "MMMMMMMMKKKKRRRRRRLLLXXGGGGGXXIIIIIIIIJJEIJJJJJJJJICCCCCCCXXQXQQQXXXTXPPPRRRRRRRRQQRRRRRRRRRRRRPPPBQQQQQQQQQPPPPPBBBBBYYYYYYYYYYFFZZZZZZXZXX\n" +
//                "MMMMMMMMKKKKYRRRRRRRLLLGGGGGXXIIIIIJJJJJJQJJJJJJJFCCCCCCCCXXXXXQQQTTTXXXXWWRRRRRJRRRRRRRRRRRRRBBBBQQQQQQQQPPPPPPPPPPYYYYYYYYYYYYYFFTXXXXXZXX\n" +
//                "MMMMMJMMKKKYYRRRRRRRRLLLLLXXXIIIIIIJJJJJJJJGGGGGGFFFCCCCCCXXXXXQQQTTTTXXXXRRRRRRJRRRRRRRRRRRRRBBBBQQQQQQQQQQPPPPPPPPPPYYYYYYYYYFFFFTXXXXXXXX\n" +
//                "MMTTTJMMKKKYYOORRRRRLLLLLLXXIIIIIIJJJJJJGJGGGGGMMIFFSSCCCXXXXXXQQTTTTTTTDDJJRJJJJJJJJJRRRRRRRRBBQQQQQQQQQQQQPPPPPPPPPZZYYYYYYYFFTTTTTTTTXXXX\n" +
//                "MMTTTMMMKKZZOOOORNLLLLLLLLLZZIZIZZEJJJJGGGGGGMMMMMMMSMMHHXXXXXXQQTTTTTTTTDJJJJJJJJJJJJJRRRRRRBBBQQQQQQQQQQQQPPPPPPPPPPZYYYYYYYYTTTTTTTTTXXXX\n" +
//                "MTTTTGMZZZZZOOONNNLLLLLLLLZZZZZIZZZZJJJGGGZZMMMMMMMMMMMHMXXXXXTQTTTTTTTTTDJJJJJJJJJJJJJRRRRRBBBBQQQQQQQQQQQQQPPPPPPPPPYYYYYYYYYTTTTTTTTXXXXX\n" +
//                "MMATTTZZZZZZYYYYYNLLLLLLLZZZZZZZZZZPPPZGGZZMMMZMMMMMMMMMMXXXXXTTTTTTTTTKKJJJJJJJJJJJJJRRBBBBBBBBBBEQQQQQQQHQMMPPPPPPUPTTTYTTYYYTTTTTTTTXXXXX\n" +
//                "MMTTTKZZZZZZZYYYNNLLLLLLLLZZZZZZZZZZZZZZZZZZZZZMMMMMMMMXXXXXXXXZZTTTTTTTJJJJJJJJJXXJJJRRDDDBBBEEEEEEEMQQQQQQMPPPPPPPTTTTTTTTTTTTTTTTTTTTXXXX\n" +
//                "MMMZZZZZZZZZZZZYNLLLLLLLDLLRRZZZZZZZZZZZZZZZZZMMMMMMMMXXXXXXXXXZZTTTTTTTJJJJJJJJXXXJJJXDDDDDDBEEEEEEEMQQMMMMMMPPPPBBUUTTTTTTTTTTTTTTTTTTTXXX\n" +
//                "MMMMMZZZZZZZZZZZLLLLLLLDDRRRDZZZZZZZZZZZZZZZZMMDMMMMMMMXXXXXXXXXXSMTTTJJJJJJJJJXXXXXXJXXDDDDDEEEEMEMMMMMMMMMMMPMPBBBBBBBBTTTTTTTTTBBBTTTXXXX\n" +
//                "MMMMMZZZZZZZZZZZLLLLLLLDDRDRDZZZZZZZZZMZZZZZMMZMMMMMMMWMXXXXXXXXXMMMMMJJJJJJJJJJXXXXXJXXDDDDDEEEEMMMMMMMMMMMMMMMMMBBBBBBBTTTTTTTBTTBBBTTXXXX\n" +
//                "MMMMMZZZZZZZZZZZLLLLLLLDDDDDDDZZZZZZZZZZZZZZZZZMMMMMMMMMMXXXXXXXXMMJJJJJJJJJJJJXXXXXXXXDDDDEEEEEEEEMMMMMMMMMMMMMMMBBBBBTTTTTTTTBBBBBBYTXXXXX\n" +
//                "MMMMZZZZZZZZZZZZLLLLNLDDDDDXDZZZZZZZZZIZZZZZZZZMMMMMMMMMMXXXXXXXMMMMBJJJJJJJJJJXXXXXXXXXDDDDDDDEEEMMMMMMMMMMMHMMMMMBBBBBTTTTTTBBBBBBBYBBXXXX\n" +
//                "MMMMZZZZZZZZZZZZNNNNNBBDDDDDDZZZZZZZZZZZZZZZZZZMMFFMMMMMXXXXXXXXMMMMBJBBJJJJJJJJXXXXXXXXXXXXDDDDEEMMMMMMMMMMMHMMMMMBBBBNNNNTTTTBBBBBBBBBXXXX\n" +
//                "MMOMMOOHZZZZUZZZZNNNBBBDDDDDDZZZZZZZZZGGGGGGZZZMFFFFFMMMXXXXRXOOMMMBBBBBJBBJJPJJXXXXXXXXXXXDDDDDEMMMMMMMMMMMMHHMMNNNBBBNNNXTTTTBBBBBBBBXXXXX\n" +
//                "MMOOOOOOOIZZIZZNNNNBBBBBDDDBBBZZZZZBBZGGGGGGZZZFFFFXXMMOOXXXXXXOOBBBBBBBBBBJJJJJEEXXXXXDDDDDDDDDDMMMMMMMMMMBHHHHMNNNNNBNNNXTTTTTBBBBBBBBBBXX\n" +
//                "OMOOOOOOOIIIIZZNNNNBBBBBDDBBBBZZZZZBZZGGGGGGZZZZFLFFMMOOOOOXXOOOOBBBBBBBBBBBJJEEEEEEXLLLDLDDZZDDDMMMMMMMMMHHHHHHHNNNNNNNNNXXXXBBBBBBBBBBBBXX\n" +
//                "OOOOOOOOOIIIIINNNNNBBBBBBDDDBBBBBBBBBZGGGGGGZZZZFFFFFFOOOOOXOOOOOBBBBBBBBBBBBEEEEELLLLLLLLLDZZZZMMMMMMMMMMMHHHHHHHHNNNNNNNNXXXXBBBBBBBBBBBNN\n" +
//                "OOOOOOOOOIIIINNNNBBBBBBBBBBBBBBBBBBBZZGGGGGGZZZFFFFFFFFOOOOOOOOOBBBBBBBBBBBBBBEEEEEELLLLLLDDZZZZMMMMMMMMMMHHHHHHHHHHNNNNNNNXXXXXXBBBBBBBBBNN\n" +
//                "OOOOOOOOOOIINNNNNNNBBBBBBBBBBBBBBGGGGGGGGGGGZZZFFFFFFFFOOOOOOOOOBBBBBBBBBBBBBBEEEEEELLLLLLDZZZZZZMMMMMMMMHHHHHHHHHHHHNNNNNNXXXXDDDBBBBBBBBNN\n" +
//                "OOOOOOOOIIINNNNNNNBBBBGGGGGBBBBZBGGGGGGGRRZLFFFFFFFFFFFFOOOOOOOOBBBIBBBBBBBDDBEEEEEEELLLLDDZZZZZZMMMMMMMMHXHHHHHHHHHHNNNNNNNXXXXXDGBBBNBBNNN\n" +
//                "OOOOOONNIIINNNNNNNNBBBRRRRGGGBBZZGGGGGGGRRZFFFFFFFFFFFFFFFOOOOOOOBBIBBBBBBDDDDDDEEEELLLLLDDZZZZZMMMMMMMMMPPHHHHHHHHQPNNNNNXXXXXXXDGBBBNNNNNN\n" +
//                "ZOOOOOONNIINNNKKKKBBBBZRRRRGGGBBZGGGGGGGRRFFFFFFFFFFFFFFFMFOOOOOIIIIIIBBBDDDDDDDDEEELLLLLZZZZZZZZZMMMMMPPPPHHHHHHHPPPPNNXXXXXDDDDDDDDNNNNNNN\n" +
//                "OOOOOOOONNIINNNKKKBBOOPPPPPPGBBBBGGGGGGGRRRFFFFFFFFFFFFFFFFOOOIIIIIIIIIIIGDDDDDDDDELLLLLEZZZZZZZZMMMMMMPPPPPPHHHPPPPPPNNPXXXXXDDDDDPDNNNNNNN\n" +
//                "AAOOOOOONNNNNNKKKKKKKZPPPPPPGBBZZGGGGGGGGRRFFFFFFFFFFFOFFFFOOOIIIIIIIIIIDDDDDDDDDDDLLLLLLOZZZZZZZMMMMMMMMMPPPPPPPPPPPPPPPXXPXXDDDDDNNNNNNNNN\n" +
//                "AAONNNNNNNNNNKKKKKKKKZPPPPPPGZZZZGGGGGGGGRRFFFFFFFFFFFOOFOFOOOOIIIIIIIVVVDDDDDDDDDDLLLLLLOOOOZZZZMMMMMMMMPPPPPPPPPPPPPPPPPPPPXDDDDDDDNNNNNNN\n" +
//                "AAAINNNNDNDNNNKKKZZKZZPPPPPPGGGZZGGGGGGGGZRFRFFFFFFFOFOOOOOOOOOIIIIIIIIVVDDDDDDDDDYLLLYLLOOOOZJZZMMMMMMMMMPPPPPPPPPPPPPPPPPIPXDDDDDNNNNNNNNN\n" +
//                "IIIIINNDDDDDNNNNNNZZPPPPPPPPGGGGZGGGGGGGGRRRRFFFFFFOOOOOOOOOOOOIIIIIIIIVVVDDDDDDDYYYYYYLLOOOOOOOOMMMMFFFMMPPPPPPPPPPPPPBPPIIIDDDDDNNNNNNNNNN\n" +
//                "IIIIIDDDDDDDNNNNNZZZPPPPPPPPGGGGZGGGGGGGGQQQRQFFFFQOOOOOOOOOOOOIIIIIIIVVVVVVDDDDDEYYYYLLOOOOOOOOOMMMMFFFFMFPPPPPPPPPIIPBPPIIIIIDDNNNNNNNNNNN\n" +
//                "IIIIIIIDDDDDNNNNNZZZPPPPPPPPGGGGLZZZZZGGGZQQQQFFFQQOQQOOOOOOOOOIIIIIIIVVVVVVVDDDEEEEYOOOOOOOOOOOOMMFFFFFFFFLFPPPPPPPPPPPIIIIDDIDDDNNNNNNNNNN\n" +
//                "IIIIIIDDDDDDDDZZZPPPPPPPPPPPPPGZZZZZZZGGGZQQQQQQQQQQQQOOOOOOOOIIIIIIIVVVVVVVVVVDEEMMOOOOOOOOOOOOOOFFFFFFFFFFFFFFVVVPPPPPPPDDDDDDDDGNNNNNNNNN\n" +
//                "IIIIIIDDDDDDDDZZZPPPPPPPPPPPPPGPZPPZZPGGGZQQQQQQQQOOOVOOOOOOOOOOIIIIIIIVVVVVVVVDMMMMOOOOOOOOOOOOODFFFFFFFFFFFFFFVVVPPPPPPPDDDDDDDDGGNGNNNNNN\n" +
//                "IIIIIIDDDDDDDDZZZPPPPPPPPPPPPPGPPPPPPPGGGPQQQQQQQQQOOOOOOOOOOOOQIIIIIIIVVVVVVVVVEMMMOOOOOOOOOOOOFFFFFFFFFFFFFFFFVVVVPVPPDDDDDDGGDGGGGGGGNNNN\n" +
//                "IIIDDIDDDDDDDDZZZPPPPPPPPPPPPPGPPPPPPPGGGQQQQQQQQOQOOOOOOOOOOOOQKIIIIZVVVVVVVVVEEEMMMMOOOOOOOOOFFFFFFFFFFFFFFFVVVVVVVVDDDDDDDDBGGGGGGGGGNNNN\n" +
//                "IDDDDDDDDDDDDDDTTPPPPPPPPPPPPPPPPPPPPQQQQQQQQQQQQOOOOOOOOOOQOOQQQQQIICCCCCRVVVEEEEMMMMMMOOOOOOOOOFFFFFFFFFFFFVVVVVVVVVDDDDDDDBBBGGGGHHHGNAAA\n" +
//                "DDDDDZDDDDDDDDTTTPPPPPPPPPPPPPPPVPVPPPPPPPQQQQQQQOOOOOOOOQQQOOQQQQQIICCCRRRREEEEEEEMMMMMMOOOOOOOOHFFFFFFFFFFFVVVVVVVVVVVDDDDDBBBGGGGHHHHAAAH\n" +
//                "DZDDDZDZDDDDDDDTTPPPPPPPPPPPPPKVVVVVPPPPPPPPQQQQJNOOOMOOOQQQOOQQQQQCCCCCRRREEEEEEEEMMMMMOOOOOOOOHHHFFFFFFFVFVVVVVVVVVVVDDDDDDBBBGGGHHHHHAAAH\n" +
//                "ZZZZZZZZDDDDDTTTTTTTZPPPPPPPPPVVVVVVVPPPPPPPJQQQJJJOOONNNQQQQQQQQCCCCCEECRREEEEEEEMMMMMMMMOOOOHHHHHFFFFFFFVVVVVVVVVVVVVDDDDDDBBBGBGHHHHFHHHH\n" +
//                "ZZZZZZZZDDDDTTTTTTTZZZZZZKKKKKVVVVVVVVPPPPPPJJQBJJJJJJNQQQQQQQQQQCCCCCCCCCRREEEEEMMMMMMMOOOOKOHFFFFFFFFFFFVVVVVVVVVVVVVDDDDDBBBBBBHHHHHHHHHH\n" +
//                "ZZZZZZZZDDDDDDDTOOOZZZZZZKKKKKVVVVVVVVPPPPPPJJJBJJJJJJNQQQQQQQQQQCCCCCCCRCRREEEMMMMMMMMMOMMMMMMMMDFFFFFFFFVVVVVVVVVVVVVDDDDDBBBBBBHHHHHHHHHH\n" +
//                "ZZZZZZZZZDDDDDDDOZZZZZZZZKKVKVVVVVVVVVPPPPPPJJJJJJJJJJNQQQQQQQQQQCCCCCRRRRREEXXHMVMMMMMMMMMMMMMMMDFFFFFFFFVVVVVVVVVVDDVDDDDDDDDDDBHHHHHHHHHH\n" +
//                "ZZZZZZZZZDDDDDDDOOZZZZZZZZVVVVVVVVVVVSPPPPPJJJJJJJJJJJQQQQQQQQQQQQQCCCRRRRREEXXXVVMMMMMMMMMMMMMMMMFFFZFFFFZVVVVVVVVVDDDDDDDDDDDDHHHHHHHHHHHH\n" +
//                "ZZZZZZZZZDZDZDDOOZZZZZZZZZVVVVVVVVVVVSPPPPPJJJJJJJJJJJJJQQQQQQQQQQQNCCRRRRRRXXXXVMMMMMMMMMMMMMMMMMMZZZZZZZZVVVVVNVVDDDDDDDDDDDDHHHHHHHHHHHHH\n" +
//                "ZZZZZZZZZZZZZDOOOOZZZZZZVVVVVVVVVVVVVPPPPPPJJJJJJJJJJJJJQQQQQQQQQQQCCCRRRRRXXXVVVMMBUUUUMMMMMMPMMZZZZZZZZZZZVVVVNVFDFFFDDDDDDDDDNHHHHHHHHHHH\n" +
//                "ZZZZZZZZZZZZZZZZOOOOOOZZTTVVVVVVVVVVVPPPPPPJJJJJJJJJJJJJQQQQQQQQQQQRCRRRRRRFXVVVVMMUUUUUMMMMPPPPPZZZZZZZZZZZZFFFFVFFFFFFTTTDTTDNNNNHNHHHHHHH\n" +
//                "ZZZZZZZZZZZZZZZZOOOOOOZTTTTVVVVVVVVVVJPPPPCJJJJJJJJJJJJJJQQQQQQQQQQRRRRRRFFFVVVVVMMUUUUUMMMMMPPPPZZPZPZZZZZFZFFFFFFFFFFFTTTTTTDNNNNNNHNHHHHH\n" +
//                "ZZZZZZZZZZZZZPPZOIIOOOOIITTTTVVVVVVVVJWPPPCCJJJJJJJJJJJJJQQQQQQQQQQRRRFFFFFFFVVVVVVUUUUMMMMPMPPPPPPPPPPZZZZFFFFYFFFFFFFFTTTQTJNNNNNNNNNHNNHH\n" +
//                "ZZZZZZZZZZZZZPPPPIIIOOOIIITTVVVVVVVVVWWWCCCCJJJJJJJJJJJJEENEQQQQRRRRRRFFFFFHFFFVVVUUUUUMMPMPPPPPPPPPPPZZZZZFFFFFFFFFFFFFFTTTNNNNNNNNNNNNNNHH\n" +
//                "ZZZZZZZZZZZZPPPPPIIIIIIIIITTVVVVVVVVVVWWWCCCCJJJJJJJJJJEOEEEQQRRRRRRRRFFFFFFFFFUUUUUUUUMMPPPPPPPPPPPPPZZZZZZFFFFFFFFFFFTTTTKNNNNNNNNNNNNNHHH\n" +
//                "ZZZZZZZZZZZPPPPPPIIIIIIIIIIVVVVVVVVVVVWWWWWWCJJJJJJJJJEEEEEEEQRRRRRRRRFFFFFFFFFFUUUUUUUUMPPPPPPPPPPPDPPZZZZZZFFFFFFFFFFFTTTNNNNNNNNNNNNNFHHH\n" +
//                "ZZZZZZZZZZZZPPPPPIIIIIIIIIIMMVVVVVNVWWWWWWWWWJJJJLLLEEEEEEEEEERRRRRRRRFFFFFFFFFCEUUUUUUMMPPPPPPPPPPPPPZZZZZZZFFFFFFFFFFFTTTNTNNNNNNNNNNNNDHH\n" +
//                "ZZZZZZZZZZZPPPPPPIPIIIIIIIIMMVPPVIWFWWWWWWWWWWLLLLLLLEEEEEEEEEERERRQQRFFFFFFFFFCEUEEEEUMPPPPPPPPPPPPPPPZZZZZZFFFFFFFFFFKTTTTTTNNNNNNNNNNNNHH\n" +
//                "ZZZZZZZZZZZPPPPPPPPIIIIIIIIIMPPPPWWWWWWWWWWWWWLLLLEEEEEEEEEEEEEEEQQQQQFFFFFFFFCCEUCCEEPMPPPPPPPPPPPPPPZZZZZZZFFFFFFFFKKKKTKTTTTTNNNNNNNNVVVH\n" +
//                "NNMZZZZZZPPPPPPPPPIIIIIIIIIIIPPPPWQQQQQWWWWWWLLLLLLLEEEEEEEEEEEEBBBQQQQFFFFFFPCCCCCCCCPPPQQQPKPPPPPPPPZZZZZZOFFKKFKKKKKKKKKTTTTTNNNNNNNNNVVV\n" +
//                "NNMZZZZZPPPPPPPPPPIRRRIUURPPPPPPPWQQQQQWWWWWWLLLLLLLEEEEEEEEEEEBBQQQQQQUFUUFFFCCCCCCCCPCPQCQPPPPPPPPPPPZZZOOOFFFKKKKKKKKNKKTTTTTNNNNNNNVVVVV\n" +
//                "NNMMMMZPPPPPPPPPPIIRRRRRRRPPPPPPPPQQQQQQQQWWWLLLLLLLEEEEEEEEEEEEEEEQQQQUUUUUUFCCCCCCCCCCCCCCCPZZZPPPZZZZZZOOOOOKKKKKKKKKKKKKTTTTTTTTVVVVVVVV\n" +
//                "MMMMMMZZPUUPPPPPPPPRRRRRRRRRPPPPPPQQQQQQQQWWWWLLLLLLEEEEEEEEEEEEQQQQQQQQQUUUUCCCCCCCCCCCCCCCCZZZPPZPZZZOOOOOOOOKKKKKKKKKKKIKTTTTTTTTVVVVVVVV\n" +
//                "MMMMMMMMUUPPPPPPPPPRRRRRRPPPPPPPPPQQQQQQQQQWQWLLLLLLEEEEEEEIEEEEQQQQQQQQUUUURRRRRRRRRRCCCCCCCZZZZZZZZZOOOOOOOOGKKKKKKKKKKIIKTTTTTTTVVVKKVEVV\n" +
//                "MMMMMLMUUPPPPPPPPPRRRRRRPPPPPPPPPPQQQQQQQQQQQQQQQQLLEEEEEEEEEEEEEQQQQQQQUUUURRRRRRRRRRCCCCCCKKKKKKKZZZOOOOOOOKKKKKKKKKKKKRIKTTTTTTTVVVKKKEVV\n" +
//                "MMMMMLMUUPPPPPPPPPPPRRRPPPPPPPPPOQQQQQQQQQQQQQQQQQLEEELEMMEEEQQQQQQQQQQIIIUURRRRRRRRRRCCCCHHKKKKKZZZOOOOOOOOOOKKKKKKKKKKKRRKTTTTTVVVEEEKEEEE\n" +
//                "MMMMMMMXXPPTPPPPPPPRRRRPPPPPPPPPPQQQQQQQQQQQQQQQQQLEEELLLLLQQQQQQQIQQQIIIIIIRRRRRRRRRRCCHHHHKKKZZZZZZOOOOOOOOOKKKKKKKKKKKRRTTTTTTTVVEEEEEEEE\n" +
//                "MMMMMXXXXXPTPPPPPPPPRRRPPPPPPPPPPQQSSSSSSSSQQQQQQLLLELLLLLLLGQQQQQIQIIIIIIIIRRRRRRRRRRCCHHHHKKKKKZAAAQQOOOOOOOKKKKKKKKKKRRRNRRLLRRVEEEEEEEEE\n" +
//                "MMMMMMMMXXPXXPPXXPXCRRRPPPPPPPPPSSSSSSSSSSSQQQLLLLLLLLLLLLLQGQQQIIIIIIIIRRRRRRRRRRRRRRCCHHHHQQQKZZAAAAQQOOOOOOOOKKKKKKKRRRRRVRRRRRREEEEEEEEE\n" +
//                "MMMMMMMXXXXXXXXXXXXRRRNPPPPPPPPPSSSSSSSSSSSQQQLLLLLLLLLLLLLLGQQIIIIIIIIIRRRRRRRRRRRRRRHHHHHHHHQQZZAAQQQQQOOOOOOOKKKKKKKRRRRRRRRRRRRREEEEEEEE\n" +
//                "MMMMMMMMXXXXXXXXXXXXRRRPPPPPPPPPSSSSSSSSSSSQQQQLLLLLLLLLLLLGGGQVIIIIIIIIRRRRRRRRRRRRHCHHHHHHHHQQQQQQQQQQQOOOOOOOKKKKKKKRRRRRRRRRRRREEEEEEEEE\n" +
//                "MMMMMMMXXXXXXXXXXXXXEEEEPPPPPPPPSSSSSSSSSSSQQQQLLLLLLLLLLLGGGGQVIILIIIIIRRRRRRRRRRRRHCHHHHHHHHHHHQQQQQQQQQYOOOOOOKKKKKKRRRRRRRRRRRCEEEEEEEEE\n" +
//                "MMMMMMMXXXXXXXXXXXXHEEEEPPCCCCPPSSSSSSSSSDDRQQQFFFFLLLLLLLGGGGGHIIIIIIIIRRRRRRRRRRRRHHHHHHHHGGHHHQQQQQQQQYYOOOOOOKKKKKRRRRRRRRRRRRRRREEEEEEE\n" +
//                "MMKKKMXXXXXXXXXXXXWHHHHHOPCCCCCCSSSSSSSSSDDDDDFFFFFLLLLLLLLGGGGHIHIIRRRRRRRRRRRRRRRRHHHHHHHGGGHHHQQQCQQQQYYYYOOHHKKKFKRRRRRRRRRRRRRRREEEEEEE\n" +
//                "MMKKKMXXXXXXXXXXHHHHHHHOOPCSSSSSSSSSSSSSSDDDDFFFFFFLFLLLLLLLLGGHHHIIRRRRRRRRRRRRRRRRHHHHGGGGGGGGHQQQCCQYYYYYROOHHKKKKHHHRRRRRRRRRRRRYEEEEEEE\n" +
//                "MMMKXXXXXXXXXXXXXHHHHHHHHCCSSSSSSSSSSSSSSDDDFFFFFFFFFLLLLLLLLLHHHIIIRRRRRRRRRRRRRRHHHHHGGGGGGGGCQQQCCQQYYYYYRYHHHHHHHHHHRRRRRRRRRRRRRREEEEEE\n" +
//                "KKKKKXXXXXXXXXXXHHHHHHHCCCCSSSSSSSSSSSSSSDDDFFFFFFFFFLLLLLLBBBBHHHHIRRRRRRRRRRRRRRHHHHHGGAAGGGGCCCCCCCCYYYYYYYHHHHHHHHHHHRRRRRRRRRRRRRREEEEE\n" +
//                "KXXXXXXXXXXXXSHHHHHHHHHHJJCSSSSSSSSSSSSDDDDDFFFTTTFFTLLMLLMMBBBBBBRRRRRRRRRRRRRRRRHHHHHHGGGGGGGCGCCCCCYYYYYYYYYHHHHHHHHHHRRRRRRRRRRRBEEEEEEE\n" +
//                "KXXXXXXXXXXXAHHHHHHHSSSSSSSSSSSSSCCDDDSDDDDDDFFTTTTFTTMMLMMPBBBBBBRRRRRRRRRRRRRRRREEPPPGGGGGGGGGGCCCCCYYYYYYYYHHHHHHHTTTHRRRBBBBBBRBBEEEEEEE\n" +
//                "KXXXXXXXDXXAAHHHHHHHSSSSSSSSSSSSSCCDDDDDDDDDTTTTTTTTTMMMMMMMTMBBBBRRRRRRRRRRRRRRRREHPPPGGGGGGGGGGGGCCYYYYYYYYYYHHHHHHTTHHHRRBBBBBBRBBEEEEEEE\n" +
//                "KKKXXXAXXXAAAHHHHHHHSSSSSSSSSSSSSCCDDDDDDDDDTTTTTTTTTTTMMMMMMMBBBBRRRRRRRRRRRRIEEEEHPPPGGGGGPGGGGGGGGGYYYYYYYYYHHHHTTTTTHBBBBBBBBBBBBEEEEEEE\n" +
//                "KKKKKXAAXAAHHHHHHHHHSSSSSSSSSSFCCCDDDDDDDDDTTTTTTTTTTMMMMMMMMMBBBBRRRRRRRRRRLEIEEEEEPPPAGGNNPPPDDGGCCCYYYYYCYYYHHHHHTTTTTBBBBBBBBBBBBBEEEEEE\n" +
//                "LLKLKXAAAAAAAAHHHHHHHHHJJJJJJJCCCDDDDDDDDDDTTTTTTTTTTMMMMMMMMMMBMBRRRRRRRRRREEEEEEEEPPPGGNNPPPPPGGGCCCCCCYYCYCHHGGHGTTTTBBBBBBBBBBBBBBBEEEEE\n" +
//                "LLLLLAAAAUUUUAAAHYHHHHHJJJJRJJJCDDDDDDDDDTTTTTTTTTTTTMMMMMMMMMMMMBRRRRRRRRRREEEEEEENPPPPPPPPPPKCCCCCCCCCCCCCYCHGGGGGTTTTVVBKBBBBBBBBBEEEEECC\n" +
//                "LLLLAAAUUUUUUAUAAHHHHJJJJJJOJGJCDDDDDDLDTTQTTTTTTTTTTMMMMMMMMMMMBBBYYYYHYYYYEEEEPPPPPPPPPPPPPPKCCCCCCCCCCCCCCCCGGGGGGTTTTTTBBFBBBBBBEEEEECCC\n" +
//                "LLLLLLUUUUUUUUUUAHHHJJJJJJJOGGGKKDKDDKLDDQQTTTTTTTTMMMMMMMMMMMMMYYYYYYYYYYYYYEEEPPPPPPPPPPPPPPKCCCCCCCCCCCCGGGGGGGGGGGTTTTFFBBBBBBBBEECCCCCC\n" +
//                "LLLLLLLUUUUUUUUAAAAAAJJJJJOOOOOOKKKKKKKKKTTTTTTTMMMMMMMMMMMMMMYYYYYYYYYYYYYYEEEEPPPPPPPPPCNNDNNOOCCCCCCCCCCCGGGGGGGGGGTTTFFFFBBBBBBBBECCCCCC\n" +
//                "LLLLLLUUUUUUUUUUUDAAJJJJOOOOOOOOOOKKKKKKKKTAMTMMMMMMMMMMMMMMMOYYYYYYYYYYYYYUEEEEPPPPPPPPPPPPPPPPPCCCCCCCCCCCCGGGGGGGGTTTTTTFBBBBBBBBHHCCCCCC\n" +
//                "LLLLLUUUUUUUUUUDDDDDPJJJJJOOOOOOOOKKKKKKKKMMMMMMMMMNNNMNMMMMOOOKKKYYYFYYYYYUEEEEPPPPPPPPPPPPPPPPPOCCCCCCCCCCCOGGGGGGGGFFTTFFBBXBXBBHHHOZCCCC\n" +
//                "LLLLLLUUUUUUUUUDUDPPPPJJJJOOOOOOOOKKKKKKKMMMMMMMMMMNNNNNNMMHOOKKYYYYYYOOYOOEEEEEPPPPPPPPPPPPPPPPPOCLLCCCCCCCCOOGGGGGGGFFTFFBBBXXXBHHHOOOCCCC\n" +
//                "LLLLLLUUUUUUUUUUUPPPPLPPJJJOOOOOOOKKKKKKKMMMMMMMSMMNNNNRNOOOOOOKYOYYOOOOOOOEEEEEEEEEPPPPPPPPPPPPPRLLLLCCCCCCCOGGGGGGGGFFFFFFFBBXXXOOOOCCCOCC\n" +
//                "LLLLUUUUUUUUUUUUUUPPPPPPJJOOOOOOOOKKKKKKMMMMMVMMMMMYNNNNNNQOOOOOOOYOOOOOOOOEEEEEEEEEPPPPFFFFFFFRRPLLLPPPPPCCPGGGGGPSSPPPFJJJJBBXOOOOOOOOOOOC\n" +
//                "LLLLLLLUUUUUUUUUUUPPPPPPJJJOOOOOTTTKKKKKMMMMMVMNWNNNNNNNNNNOOOOOOOYOOOOOOOOEEEOEEEEOPPPPFKFFFFRRPPLPLPPPPPCPPPPPPPPPPPPPFFJJJJJXXOEOOOOOOCCC\n" +
//                "LLLLLLUUUUUUUUUUUPPPPPPPJJOOOOOOTTTKKKCMMMMMMMMNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOEDDPPPPDDDDRRRRRPPPPPPPPPPPPPPPPPPPPPPFFFFJJJJJXOOOOOOOCCCC\n" +
//                "LUULUUUUUUUUUUUUUUPPPPPPPPPPOOTTTTTTKKMMMMIMCCCNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOODDPPPPDDDDDRRRRRPPPPPPPPPPPPPPPPPPPPPPFJJJJJJJJJJOOOCCCCCC\n" +
//                "DUUUUUUUUUUUUUUAPPPPPPPPPPTTTTTTTTTTKMMMMMMMCCCCNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOODDDDDDDDDRRRRRRRPPPPPPPPPPPPPPPPPPPPPJJJJJJJJJJJOOCCCCCCC\n" +
//                "DDDUUUUUUUUUUCCPPPPPPPPPPPPTTTTTTTTTTMMWWWWMCCCCNNNNNNNNNKOOOOOOOOOOOOOOOOOOOOOOOOODDDDDDDDDDRRRRPPPPPPPPPPPPPPPPPPPPPPPAJJJJJJJJCCCCCCCCCCC";

//        String input =
//                        "OOOOO\n" +
//                        "OXOXO\n" +
//                        "OOOOO\n" +
//                        "OXOXO\n" +
//                        "OOOOO";
//        String input = "RRRRIICCFF\n" +
//                "RRRRIICCCF\n" +
//                "VVRRRCCFFF\n" +
//                "VVRCCCJFFF\n" +
//                "VVVVCJJCFE\n" +
//                "VVIVCCJJEE\n" +
//                "VVIIICJJEE\n" +
//                "MIIIIIJJEE\n" +
//                "MIIISIJEEE\n" +
//                "MMMISSJEEE";

        String input =
                "AAAAAA\n" +
                        "AAABBA\n" +
                        "AAABBA\n" +
                        "ABBAAA\n" +
                        "ABBAAA\n" +
                        "AAAAAA";

        String[] split = input.split("\\n");
        char[][] inputArr = new char[split.length][split[0].length()];
        for (int i = 0; i < split.length; i++) {
            inputArr[i] = split[i].toCharArray();
        }

        int answer1 = solutionForPartOne(inputArr);
        System.out.println(answer1);

//        int answer2 = solutionForPartTwo(inputArr);
//        System.out.println(answer2);
    }

    public static int solutionForPartOne(char[][] inputArr) {
        int res = 0;
        int h = inputArr.length;
        int w = inputArr[0].length;
        int[][] reginMap = new int[inputArr.length][inputArr[0].length];

        LinkedList<Point> queue = new LinkedList<>();
        queue.offer(new Point(0, 0));

        int reginIndex = 0;
        while (!queue.isEmpty()) {
            Point xy = queue.poll();

            int x = xy.getX();
            int y = xy.getY();
            int perimeter = 0;
            int times = 0;

            if (reginMap[x][y] != 0) {
                continue;
            }
            reginMap[x][y] = ++reginIndex;

            LinkedList<Point> internalPoints = new LinkedList<>();
            internalPoints.offer(xy);

            while (!internalPoints.isEmpty()) {
                times++;
                Point XY = internalPoints.poll();
                int X = XY.getX();
                int Y = XY.getY();
                char C = inputArr[x][y];
                int regin = reginMap[X][Y];

                //right
                if (Y + 1 < w) {
                    char nearC = inputArr[X][Y + 1];
                    boolean b = C == nearC;
                    perimeter += b ? 0 : 1;

                    Point point = new Point(X, Y + 1);
                    if (b) {
                        if (reginMap[X][Y + 1] == 0) {
                            reginMap[X][Y + 1] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                    }
                } else {
                    perimeter++;
                }

                //left
                if (Y - 1 >= 0) {
                    char nearC = inputArr[X][Y - 1];
                    boolean b = C == nearC;
                    perimeter += b ? 0 : 1;

                    Point point = new Point(X, Y - 1);
                    if (b) {
                        if (reginMap[X][Y - 1] == 0) {
                            reginMap[X][Y - 1] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                    }
                } else {
                    perimeter++;
                }

                //up
                if (X - 1 >= 0) {
                    char nearC = inputArr[X - 1][Y];
                    boolean b = C == nearC;
                    perimeter += b ? 0 : 1;

                    Point point = new Point(X - 1, Y);
                    if (b) {
                        if (reginMap[X - 1][Y] == 0) {
                            reginMap[X - 1][Y] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                    }
                } else {
                    perimeter++;
                }
                //down
                if (X + 1 < h) {
                    char nearC = inputArr[X + 1][Y];
                    boolean b = C == nearC;
                    perimeter += b ? 0 : 1;

                    Point point = new Point(X + 1, Y);
                    if (b) {
                        if (reginMap[X + 1][Y] == 0) {
                            reginMap[X + 1][Y] = regin;
                            internalPoints.offer(point);
                        }
                    } else {
                        queue.offer(point);
                    }
                } else {
                    perimeter++;
                }
            }
            res += times * perimeter;
        }
        return res;
    }

//    public static int solutionForPartTwo(char[][] inputArr) {
//        int res = 0;
//        int h = inputArr.length;
//        int w = inputArr[0].length;
//        int[][] reginMap = new int[inputArr.length][inputArr[0].length];
//
//        LinkedList<Point> queue = new LinkedList<>();
//        queue.offer(new Point(0, 0));
//
//        int reginIndex = 0;
//        Map<Integer, Integer> timesMap = new HashMap<>();
//        while (!queue.isEmpty()) {
//            Point xy = queue.poll();
//            int x = xy.getX();
//            int y = xy.getY();
//            int times = 0;
//
//            if (reginMap[x][y] != 0) {
//                continue;
//            }
//            reginMap[x][y] = ++reginIndex;
//
//            LinkedList<Point> internalPoints = new LinkedList<>();
//            internalPoints.offer(xy);
//            while (!internalPoints.isEmpty()) {
//                times++;
//                Point XY = internalPoints.poll();
//                int X = XY.getX();
//                int Y = XY.getY();
//                char C = inputArr[x][y];
//                int regin = reginMap[X][Y];
//
//                //right
//                if (Y + 1 < w) {
//                    char nearC = inputArr[X][Y + 1];
//                    boolean b = C == nearC;
//                    Point point = new Point(X, Y + 1);
//                    if (b) {
//                        if (reginMap[X][Y + 1] == 0) {
//                            reginMap[X][Y + 1] = regin;
//                            internalPoints.offer(point);
//                        }
//                    } else {
//                        queue.offer(point);
//                    }
//                }
//
//                //left
//                if (Y - 1 >= 0) {
//                    char nearC = inputArr[X][Y - 1];
//                    boolean b = C == nearC;
//                    Point point = new Point(X, Y - 1);
//                    if (b) {
//                        if (reginMap[X][Y - 1] == 0) {
//                            reginMap[X][Y - 1] = regin;
//                            internalPoints.offer(point);
//                        }
//                    } else {
//                        queue.offer(point);
//                    }
//                }
//
//                //up
//                if (X - 1 >= 0) {
//                    char nearC = inputArr[X - 1][Y];
//                    boolean b = C == nearC;
//                    Point point = new Point(X - 1, Y);
//                    if (b) {
//                        if (reginMap[X - 1][Y] == 0) {
//                            reginMap[X - 1][Y] = regin;
//                            internalPoints.offer(point);
//                        }
//                    } else {
//                        queue.offer(point);
//                    }
//                }
//
//                //down
//                if (X + 1 < h) {
//                    char nearC = inputArr[X + 1][Y];
//                    boolean b = C == nearC;
//                    Point point = new Point(X + 1, Y);
//                    if (b) {
//                        if (reginMap[X + 1][Y] == 0) {
//                            reginMap[X + 1][Y] = regin;
//                            internalPoints.offer(point);
//                        }
//                    } else {
//                        queue.offer(point);
//                    }
//                }
//
//
//            }
//            timesMap.put(reginMap[x][y], times);
//        }
//
//
//        for (int i = 1; i <= reginIndex; i++) {
//            int edges = 0;
//            for (int x = 0; x < h; x++) {
//                for (int y = 0; y < w; y++) {
//                    //up
//                    if (x-1>=0){
//
//                    }else {
//
//                    }
//                    if (reginMap[x][y] == i) {
//                        edges++;
//                        if (x - 1 >= 0) {
//                            for (int k = y; k < w; k++) {
//                                y = k;
//                                if (reginMap[x][k] != i || reginMap[x - 1][k] == i) {
//                                    break;
//                                }
//                            }
//
//
//                        } else {
//                            for (int k = y; k < w; k++) {
//                                y = k;
//                                if (reginMap[x][k] != i) {
//                                    break;
//                                }
//                            }
//                        }
//                    }
//                    //down
////                    if (reginMap[x][y] == i) {
////                        edges++;
////                        while (reginMap[x][y] == i) {
////                            y++;
////                        }
////                    }
//
//                    //left
//
//                    //right
//                }
//            }
//
//            for (int x = 0; x < h; x++) {
//                for (int y = 0; y < w; y++) {
//                    //up
//                    if (reginMap[x][y] == i) {
//                        edges++;
//                        while (reginMap[x - 1][y] == i) {
//                            y++;
//                        }
//                    }
//                    //down
//                    if (reginMap[x][y] == i) {
//                        edges++;
//                        while (reginMap[x][y] == i) {
//                            y++;
//                        }
//                    }
//
//                    //left
//
//                    //right
//                }
//            }
//            res += edges * timesMap.get(i);
//        }
//
//
//        return res;
//    }

    static class Point {
        private int x;
        private int y;

        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int getX() {
            return x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getY() {
            return y;
        }

        public void setY(int y) {
            this.y = y;
        }

        @Override
        public boolean equals(Object o) {
            if (o == null || getClass() != o.getClass()) return false;
            Point point = (Point) o;
            return x == point.x && y == point.y;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }

        @Override
        public String toString() {
            return "Point{" +
                    "x=" + x +
                    ", y=" + y +
                    '}';
        }
    }
}
